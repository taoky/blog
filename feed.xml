<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh_CN">
  <generator uri="http://jekyllrb.com" version="3.8.5">Jekyll</generator>
  
  
  <link href="https://taoky.github.io/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://taoky.github.io/" rel="alternate" type="text/html" hreflang="zh_CN" />
  <updated>2019-02-12T11:44:50+00:00</updated>
  <id>https://taoky.github.io//</id>

  
    <title type="html">taoky’s blog</title>
  

  
    <subtitle>taoky's blog</subtitle>
  

  
    <author>
        <name>taoky</name>
      
      
    </author>
  

  
  
    <entry>
      
      <title type="html">重新迁移：回到 Jekyll</title>
      
      
      <link href="https://taoky.github.io/2019-02-12/migration-to-jekyll-again.html" rel="alternate" type="text/html" title="重新迁移：回到 Jekyll" />
      
      <published>2019-02-12T09:17:00+00:00</published>
      <updated>2019-02-12T09:17:00+00:00</updated>
      <id>https://taoky.github.io/2019-02-12/migration-to-jekyll-again</id>
      <content type="html" xml:base="https://taoky.github.io/2019-02-12/migration-to-jekyll-again.html">&lt;p&gt;再次迁移回了 Jekyll。&lt;/p&gt;

&lt;p&gt;从 Hexo 迁移回去的很大一个原因是 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; 给人带来的无力感：我只想简简单单做一件事情，但是 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; 给我带来了无穷无尽的依赖，还有 GitHub 时不时给我发送的安全警告。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pictures/migration/1.png&quot; alt=&quot;Security Alert by GitHub&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;啊……&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hexo 的 &lt;a href=&quot;https://github.com/theme-next/hexo-theme-next&quot;&gt;NexT 主题&lt;/a&gt; 确实很漂亮，但是实话讲有点审美疲劳了吧（尤其是看到有一大帮人用了之后）。原来的评论系统使用的是 &lt;a href=&quot;https://github.com/imsun/gitment&quot;&gt;Gitment&lt;/a&gt;——把 GitHub Issues 搞成评论确实是一个很新奇的主意，但是看到 repo 的 issues 里面一堆让我感到有点尴尬，而且一个更现实的问题是：根本没人评论啊。&lt;/p&gt;

&lt;p&gt;花了一点时间，重新搞回来了，没有遇到太糟糕的问题，顺便为了用各种 plugins，搞了 CI 部署 GitHub Pages，感谢 @iBug 提供的示例脚本。&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>taoky</name>
          
          
        </author>
      

      

      
        <category term="Jekyll" />
      
        <category term="Hexo" />
      

      
        <summary type="html">再次迁移回了 Jekyll。</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">瞎写的大一一年总结</title>
      
      
      <link href="https://taoky.github.io/2018-08-29/freshman-year.html" rel="alternate" type="text/html" title="瞎写的大一一年总结" />
      
      <published>2018-08-29T16:36:12+00:00</published>
      <updated>2018-08-29T16:36:12+00:00</updated>
      <id>https://taoky.github.io/2018-08-29/freshman-year</id>
      <content type="html" xml:base="https://taoky.github.io/2018-08-29/freshman-year.html">&lt;p&gt;我主博客的文章太少了，所以打算在假期的最后加一篇。以后打算再多写点技术类的东西，毕竟把这里完全作为个人生活的记录处不像是 GitHub Pages 的正确用法啊😂，作为一个 CS 系的同学，不写点跟这有关的东西好像对不起自己啊，虽然怕是一开学，就没有时间可以给我写东西了。另外，我又开了一个 repo，记录我自己的艺术与娱乐作品点评。链接这里就不放了，不过只要稍微找一找就能轻松找到的。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;下面的都是瞎写写出来的，写到后来我自己也不知道在写什么就是了。&lt;/p&gt;

&lt;h2 id=&quot;01&quot;&gt;01&lt;/h2&gt;

&lt;p&gt;大一一进来的课表比我想象得松，但到大一下课表就紧实了不少。到搬到中区之后，每天西区和中区往返，就是不少的运动量。&lt;/p&gt;

&lt;p&gt;大概大一上的时候考虑的是保守主义，所以公选只搞了一门看起来非常简单的 MOOC——当然实际上，也确实非常简单。剩下来就是翻阅评课社区，看看有没有什么巨坑可以避开的。&lt;/p&gt;

&lt;p&gt;体验其实还是可以的，虽然一开始专业类的课程没有（我想象得）那么多，西区也确实寒碜了点。现在想来，大一上简直就是轻松愉快（除了大作业集中的一两个星期之外）。高级班的英语只在大一上有课，体验也不错。&lt;/p&gt;

&lt;p&gt;到了大一下，为了凑满公选学分，选了桥牌和另一门 MOOC，这两门课的压力也不怎么大，虽然我桥牌到后面都是凭感觉来打的，最后一堂课的考试有一点头疼。至于别的课，代数结构到第二章数论的时候就感觉头疼，高中时候没学过数论的我当时睁眼抓瞎，不过还好数论对后面群环域的部分关系不是非常紧密，还有与我想象中完全不一样的电磁学——这两门占用了我大半的作业时间。&lt;/p&gt;

&lt;p&gt;当然还有「科大特产」：大物实验。有一张图片很有名，可以用来描述一名普通的学生面对大物实验时的心理变化：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pictures/freshman/cpe.png&quot; alt=&quot;「大物实验我*你娘」&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;图一。来源：&lt;a href=&quot;https://www.zhihu.com/question/35867101/answer/150074112&quot;&gt;如何评价中科大开设的大物实验课？ - 知乎&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;大物实验一开始可折腾得不轻。不过做了几次实验之后，轻车熟路，&lt;del&gt;在张力等学长的帮助下&lt;/del&gt;，实验都还算顺利，有几次有惊无险吧。&lt;/p&gt;

&lt;p&gt;程序设计的话，对我来说没什么，两个学期都选的 mjh 的课。不过我要吹爆 mjh 班下半学期的实验。就是应该多一点，然后让大家自己搜索资料学习啊。隔壁班连个算分的大作业都没有。作为一个追求全平台的人，写图形界面用过了 PyQt 和 Electron。&lt;/p&gt;

&lt;p&gt;至于物理的话，科大特色嘛。我一位高中同学，现在在南大计算机系，吐槽说我们怎么这么多物理课，就算是计拔也只要学大学物理啊。物理课到下学期就结束了，再忍忍吧。&lt;/p&gt;

&lt;p&gt;哦还有到快开学才出分的新生研讨课。为什么我要提它呢？因为和同学一起做项目写代码写着开心啊～&lt;/p&gt;

&lt;h2 id=&quot;02&quot;&gt;02&lt;/h2&gt;

&lt;p&gt;科大有很多不错的地方，也有很多糟糕的地方。具体不列举，因为没那个精力去想。&lt;/p&gt;

&lt;p&gt;不过，来到科大最棒的一件事情就是加入 LUG 啦！如果科大没有 LUG，我现在就很有可能在南大了😂。&lt;/p&gt;

&lt;p&gt;认识了很多很不错的人，也认识了更多有趣的东西。&lt;/p&gt;

&lt;p&gt;另一个社团是爱乐社，我报名想去参加写代码的工作，结果被分到了设计，而且一整个学期啥都没干……最后也自己退出来了吧就是……&lt;/p&gt;

&lt;h2 id=&quot;03&quot;&gt;03&lt;/h2&gt;

&lt;p&gt;大学生活的第一年，感觉还是可以的。&lt;/p&gt;

&lt;!--

5pyJ5Lqb6K+d5YaZ5Zyo6L+Z6YeM77yM5Zug5Li644CM5p+Q5L2N44CN44CM566h55CG5Lq65ZGY44CN5piv55yL5LiN5Yiw6L+Z6YeM55qE44CCCgrorqHnrpfmnLrns7vlpKfkuIDkuI3og73luKbnlLXohJHvvJ/ov5nlsLHmmK/lpJbooYzpooblr7zlhoXooYzlvI/nmoTlvLHmmbrlhrPnrZbvvIHmiJHlsLHluKbkuobvvIzogIzkuJTmiJHlpb3lpb3nmoTjgIIKCuS9oOesrOS4gOasoeW9k+ePreS4u+S7u++8n+aIkei/mOesrOS4gOasoeW9k+Wkp+WtpueUn+WRou+8gQoK5L2g6YKj5LmI5Zac5qyi5by65Yi26Ieq5Lmg77yf6KaB5piv5aSn5LqM5YaN6L+Z5LmI5pCe5oiR6KaB55So5LiA5YiH6IO955So55qE5omL5q615ouS57ud44CCCgrov5jmnInnnaHmh5Lop4nlkovkuobvvJ/lkajmnKvkvJHmga/kuIDkuIvpg73kuI3ooYzvvJ8KCg==

--&gt;

&lt;p&gt;宿舍还行吧，有兴趣相似的人。学校外的话就只吃过饭，没什么其他的娱乐活动。不过感谢大物实验，我开始看动画了。啥？玩游戏？你到大一下学期还有时间玩游戏？谈恋爱？你觉得科大这个男女比例可能吗？&lt;/p&gt;

&lt;h2 id=&quot;04&quot;&gt;04&lt;/h2&gt;

&lt;p&gt;&lt;del&gt;没有未来的未来不是我想要的未来&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;加入了校 CTF 战队，但我其实没有特别想往安全方向走的打算。之所以加入，是因为一开始感觉自己之前知道的，「看起来没有什么卵用」的东西，竟然真的能在这里「有点卵用」。和大家一起比赛也很开心，&lt;del&gt;虽然很累，20 号比赛完之后我直接躺床上睡着了&lt;/del&gt;。&lt;/p&gt;

&lt;p&gt;别的类型的比赛可能也会参加吧，只是可能真的再也分不出多少精力了吧。&lt;/p&gt;

&lt;p&gt;以后的话，大概方向就是 专业知识 + 英语口语的样子吧，再在 GitHub 上吸引一些小星星吧😂。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;EOF&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>taoky</name>
          
          
        </author>
      

      
        <category term="总结" />
      

      
        <category term="总结" />
      
        <category term="大一" />
      

      
        <summary type="html">我主博客的文章太少了，所以打算在假期的最后加一篇。以后打算再多写点技术类的东西，毕竟把这里完全作为个人生活的记录处不像是 GitHub Pages 的正确用法啊😂，作为一个 CS 系的同学，不写点跟这有关的东西好像对不起自己啊，虽然怕是一开学，就没有时间可以给我写东西了。另外，我又开了一个 repo，记录我自己的艺术与娱乐作品点评。链接这里就不放了，不过只要稍微找一找就能轻松找到的。</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">语言学家</title>
      
      
      <link href="https://taoky.github.io/2018-07-14/language-gaokao-composition.html" rel="alternate" type="text/html" title="语言学家" />
      
      <published>2018-07-14T10:09:29+00:00</published>
      <updated>2018-07-14T10:09:29+00:00</updated>
      <id>https://taoky.github.io/2018-07-14/language-gaokao-composition</id>
      <content type="html" xml:base="https://taoky.github.io/2018-07-14/language-gaokao-composition.html">&lt;p&gt;据说今年的高考全国都变得简单了。作为一个已经从高中毕业了一年多的「学长」，我恐怕也只能对语文科目的作文说上点什么了。在今年高考之后，我突然想写一下我省的作文题：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;根据以下材料，选取角度，自拟题目，写一篇不少于800字的文章；文体不限，诗歌除外。&lt;/p&gt;

  &lt;p&gt;花解语，鸟自鸣，生活中处处有语言。&lt;/p&gt;

  &lt;p&gt;不同的语言打开不同的世界，音乐、雕塑、程序、基因……莫不如此。&lt;/p&gt;

  &lt;p&gt;语言丰富生活，语言演绎生命，语言传承文明。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在去年考场&lt;del&gt;开车&lt;/del&gt;（大误）之后，其实我还是挺佩服江苏语文作文的出题人的。在其他省都在搞什么「任务驱动型」的时候，去年就写个车。当然，今年的作文题目也在全国是一股「清流」了。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;我高中的作文水平不怎么样，从高二开始就不再写记叙文了，专心背论据，写议论文，但分数一直不高，而且我接下来打算写一篇小说。所以说，我无法保证接下来你看到的文字的质量。我根本没打算按照高考作文的「套路」去写，所以如果你还在准备高考，请&lt;strong&gt;不要&lt;/strong&gt;将接下来的文字当作高考范文之类的东西，否则后果自负。&lt;/p&gt;

&lt;p&gt;同时请注意，下面的小说&lt;strong&gt;可能存在事实性错误&lt;/strong&gt;，请避免将如下的内容作为讨论时的论据。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;2020 年。&lt;/p&gt;

&lt;p&gt;他是一名语言学家，但在业界没有什么名气。现在，他正飞往一处小岛。在那座岛屿上，还残留着一门濒危的语言，全世界总共也就只有岛屿上的十几名原住民还在使用这种语言。&lt;/p&gt;

&lt;p&gt;他是去给这门语言建立档案的，换句话说，就是把什么语法、词汇，还有当地的民间文学记录下来。毕竟岛上就那么些人，去「复兴」这门语言是根本做不到的。&lt;/p&gt;

&lt;p&gt;直升机缓缓降落在岛上，他找到了岛上唯一的原始部落区，向酋长说明来意后，酋长表示欢迎，随后说道：&lt;/p&gt;

&lt;p&gt;「现在已经没有人再愿意使用这门语言了。不仅是我们的孩子们，他们不愿意学，就连学过的成年人，他们在日常交流的时候，也用的是英语。毕竟，大家都想要更好的生活水平，而其中一个限制，就是我们的本土语言……」&lt;/p&gt;

&lt;p&gt;他面露难色，但知道自己也无法改变这种局面。&lt;/p&gt;

&lt;p&gt;「但不管怎么说，如果您需要什么，我们会尽力提供帮助。」&lt;/p&gt;

&lt;p&gt;之后，他用几天时间，尽力搜集第一手的资料。他并不喜欢去研究这门语言，之所以尽力，只是为了之后能少来这里几趟：一来，实验室的研究经费不多，划给这门语言的研究项目的钱更少，为了省钱，他不能一直到这里来；二来，他在这座小岛上也是水土不服，不管是食物还是气候，都让他感到厌恶。&lt;/p&gt;

&lt;p&gt;返程的时候，他想，为什么他高考之后报专业的时候，会选择语言学呢？他大概是忘了。他只是感觉，这样很累，而且一门只有十几个人说的语言，去拯救它……又有什么意义呢？&lt;/p&gt;

&lt;p&gt;他不知道。&lt;/p&gt;

&lt;p&gt;在第三次前往小岛，进行收尾工作的时候，飞机遭遇了恶劣天气。当他发现飞机已经失控，无力回天之后，他的脑海中像是走马灯一样，看到了故乡的麦田，他的父母、妻子……最后，是这门语言的符号。&lt;/p&gt;

&lt;p&gt;「之后没人会再去关注这门语言了吧，就像没人，会再去关注我一样。」&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;2050 年。&lt;/p&gt;

&lt;p&gt;一名年轻人在公开的语言学数据库的一个角落里，发现了一门独特的语言的档案。说它「独特」，是因为它的资料大体上齐全，但是从 2020 年文件创建开始，就没有人再去关注过这些资料了。&lt;/p&gt;

&lt;p&gt;是谁创建这些档案的呢？他不知道。不过，如此齐全的资料倒是很适合他的研究课题：使用人工智能的方式分析语言。在几个月的调参之后，他终于获得了大体满意的结果。&lt;/p&gt;

&lt;p&gt;他大概翻找了一下结果，没有发现什么「特别有价值」的东西，比如说像未来的预言、拯救世界的方法之类的。不过，这种情节，也只会在科幻小说里才会出现吧。&lt;/p&gt;

&lt;p&gt;尽管没有什么现实意义，阅读这些翻译后的作品也是一件有趣的事情。第一篇是日记，很简短，只是记录了打猎与种植的收获多少而已。第二篇则看起来像是原始的成文法，记录了犯下偷窃等罪行的时候会受到的惩罚……他继续看下去，他看到了更加丰富的生活记录，一些有趣的民歌，甚至还有一封情书。但到最后，他看到了几篇文章，是用这门原始的文字，夹杂着英文的动词与名词写成的。这些夹杂着的词，几乎都是描述西方 20 世纪之后出现的生活方式的。&lt;/p&gt;

&lt;p&gt;「恐怕，现在世界上，只有我才知道这门语言的内容了吧。」他之前向数据库管理员发邮件询问整理者的情况，但收到的回复却是，此人早已因空难离世了。&lt;/p&gt;

&lt;p&gt;他长叹一声。现在人们的语言越来越少了，不仅仅是自然语言，甚至编程语言也在逐渐统一起来。确实，这样的趋势有利于全世界人们相互交流，可我们会因此失去什么呢？&lt;/p&gt;

&lt;p&gt;他又看了一眼结果，似乎明白了什么。&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>taoky</name>
          
          
        </author>
      

      
        <category term="小说" />
      

      
        <category term="高考" />
      
        <category term="作品" />
      

      
        <summary type="html">据说今年的高考全国都变得简单了。作为一个已经从高中毕业了一年多的「学长」，我恐怕也只能对语文科目的作文说上点什么了。在今年高考之后，我突然想写一下我省的作文题：</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">高考，与高考之后……</title>
      
      
      <link href="https://taoky.github.io/2017-08-09/after-gaokao.html" rel="alternate" type="text/html" title="高考，与高考之后……" />
      
      <published>2017-08-09T11:29:29+00:00</published>
      <updated>2017-08-09T11:29:29+00:00</updated>
      <id>https://taoky.github.io/2017-08-09/after-gaokao</id>
      <content type="html" xml:base="https://taoky.github.io/2017-08-09/after-gaokao.html">&lt;p&gt;其实高考早就结束了，现在写这个东西可能太迟了一点。虽然其实我很早就想开始写了，但我真的懒得去敲键盘码字。&lt;/p&gt;

&lt;p&gt;在框架成功迁移到 Hexo 之后，我觉得是时候应该开始填坑了。（不过那篇关于 BMP 的文章我暂时不想填）&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;对高考的吐槽&quot;&gt;对高考的「吐槽」&lt;/h2&gt;

&lt;p&gt;今年的卷子……嗯……感觉非常诡异。整体难度比去年难（除了物理）。不过想到自己再也不用在试卷上填满 800 字的格子，不用去细想有机物官能团、合成路线这种对我来说考完之后就没有太大意义的东西，还是有点激动的。&lt;/p&gt;

&lt;p&gt;虽然说两门选修科目是可以「自由」选择的，但是为了留在理强，我不得不选择了据说（个人感觉）极其恐怖的化学。因为按照江苏卷的要求，物化最终的等第是按照比例分配的，而化学选的人比较少（意味着选择化学就需要与更多的「学霸」争抢 A+ 和 A）。虽然我自己觉得学 CS 的话化学和生物似乎都没有什么用。&lt;/p&gt;

&lt;p&gt;所以经过一番煎熬（高三下半学期真的非常痛苦），最终的战斗终于开始了……我现在当然不会说去后悔哪个答案填得不对，因为我考完之后根本没有去对答案，到现在为止我已经忘得一干二净了。&lt;/p&gt;

&lt;p&gt;（所有试卷在考试院网站上可以&lt;a href=&quot;http://www.jseea.cn/contents/channel_1/2017/06/1706092140912.pdf&quot;&gt;下载&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;只是有一些内心的「吐槽」想说吧：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;语文：
    &lt;ul&gt;
      &lt;li&gt;第二道单选第一眼看过去像病句题，然后四个选项扫过去都没问题，直到我看了题干……「下列句子中，没有使用比喻手法的一项是」还好考试还没正式开始。&lt;/li&gt;
      &lt;li&gt;为什么文言文会考文化常识题。「江左」「三代」「&lt;ruby&gt;菽&lt;rt&gt;shū&lt;/rt&gt;&lt;/ruby&gt;水」「趋庭」……反正我觉得四个都看上去是对的。&lt;/li&gt;
      &lt;li&gt;作文是……「车」？让人万万没想到啊。不过这种作文就只是看到的时候觉得很意外，但是其实写的时候角度很多。反正我是写车与生活节奏快慢的关系，也不知道有没有偏题。据说记叙文相比议论文优势很大，但不知道是不是真的。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;数学：
    &lt;ul&gt;
      &lt;li&gt;据说是东南大学某教授出的卷子？嗯葛军后继有人了。&lt;/li&gt;
      &lt;li&gt;看上去不难，但就是来不及。&lt;/li&gt;
      &lt;li&gt;是&lt;ruby&gt;没&lt;rt&gt;mò&lt;/rt&gt;&lt;/ruby&gt;入水中还是&lt;ruby&gt;没&lt;rt&gt;méi&lt;/rt&gt;&lt;/ruby&gt;入水中呢？哈哈哈（当然我考试时候没有犯二，但标准答案两种都是对的）。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;英语：
    &lt;ul&gt;
      &lt;li&gt;据说很难，但我个人感觉除作文之外就是做着有点虚而已。&lt;/li&gt;
      &lt;li&gt;作文居然写电影票房！居然是概括柱状图！还好考试前看了一下图表概括，但我还是不确定百亿的英文我有没有写对。不过现在围观了某生某世的这场滑稽戏后，突然觉得这个题目还蛮应景的。
        &lt;ul&gt;
          &lt;li&gt;可是作文为什么有两个「谈谈看法」？我到底应该写什么？&lt;/li&gt;
          &lt;li&gt;还有……唔……我作文好像超字数了。&lt;/li&gt;
          &lt;li&gt;结论：你以为你在考数学？你以为你在考英语？其实你还是在考语文。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;物理：
    &lt;ul&gt;
      &lt;li&gt;比较简单。但我还是有几道题做的时候不确定。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;化学：
    &lt;ul&gt;
      &lt;li&gt;很难。不过按照江苏卷的模式的话，很难的化学反而是对我有利的。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一切结束之后，看到课桌上我写的字条：「看到高考一天天接近，你感觉你自己充满了决心。」我想，我应该是用上了我自己的所有决心了。&lt;/p&gt;

&lt;h2 id=&quot;出成绩&quot;&gt;出成绩？&lt;/h2&gt;

&lt;p&gt;因为没有对答案，所以我只能大概估一下分。（满分 480）大概估计 380 ± 5，物化 A+ A 的样子（事实证明我还是太保守了）。&lt;/p&gt;

&lt;p&gt;然后也没什么事情干（又没有暑假作业），所以就呆在家里玩。在高考前一段时间，我用一本小本子写下了我高考后应该做的事情，然而我在这段时间真的没有按本子上的去做。懒癌发作了……&lt;/p&gt;

&lt;p&gt;出成绩的当天下午就每隔一个小时打一次电话问成绩。官方口径是晚上八点出，但在一个小时之前就可以查了。&lt;/p&gt;

&lt;p&gt;结果出乎意料。考得还不错。当时想这个分数去南大肯定没有问题（但是最终没有去）。&lt;/p&gt;

&lt;h2 id=&quot;选择&quot;&gt;选择&lt;/h2&gt;

&lt;p&gt;最终在南大和中科大中选。纠结了好几天，最终还是决定去中科大。当时我想我在班里最好的朋友也去科大，另外科大有著名的 LUG（至少从我家里访问&lt;a href=&quot;https://mirrors.ustc.edu.cn&quot;&gt;科大源&lt;/a&gt;的速度很快，并且科大源项目很全）。虽然这也意味着离家更远，数理科目成绩（大概率）被别人碾压，并且本科四年很有可能找不到女票。&lt;/p&gt;

&lt;p&gt;毕竟现在我想改也改不了了。而且我现在还要准备入学考试。&lt;/p&gt;

&lt;p&gt;不过我想，可能当时一个小变量的改变就会带来完全不一样的结果——如果考试时候突然脑子一抽（或者脑子一清醒）改了一个答案呢？如果在选学校的时候对各个因素加的权不一样呢？&lt;/p&gt;

&lt;p&gt;Who knows?&lt;/p&gt;

&lt;h2 id=&quot;乱写点什么&quot;&gt;乱写点什么&lt;/h2&gt;

&lt;p&gt;如果现在让我去高考考场的话，我肯定不能考到正常分数。因为大概两个月在家里之后，我已经把很多高考知识都忘了。大概在家里写点小程序（不是微信那个），玩玩游戏（嗯我玩了两遍 Undertale 的和平结局），看看书（其实看得不多），睡懒觉。在写程序的过程中我又明白了两件事情：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;移动端的触摸体验绝对不能忽视。（这一点上 eCharts 做得不太好，反正我被坑了）&lt;/li&gt;
  &lt;li&gt;大型项目构建的时候需要有统筹规划，与写这个项目的「实力」。（这一点说得比较虚……我本来想用 Python 写一个游戏的，一开始不停更换框架，然后面向对象搞不清楚，就一边写一边加函数。刚开始写的时候发现可能要用线程，照猫画虎添加了之后发现线程不安全的 pygame 不播放音乐了……一番折腾之后写到开屏动画结束，十几个函数互相调用，混乱到完成不下去了，结果弃坑）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;出成绩之后和初中的老朋友们吃了一顿饭，他们似乎都考得不是特别好。最让我感到无奈的是爽哥，我不知道他高考时候发生了什么，可最后……唉……他似乎没有考满一本线，去了南大的一所附属学院，不过他也在计算机系。前段时间他特别认真的问我怎么学编程。学文科的老邓分数也无缘南大，最终去了武汉大学，离这里比合肥还要远一段。老温似乎去了湖南？我也不太确定。&lt;/p&gt;

&lt;p&gt;其实就算是我们班，也有人考出来分数与平时相比反常的。现在想来，高考其实是与很多因素都有关系的——不仅仅是实力。至少在我校考场上有人数学填空题没有填到答卷上，有人数学考试时候癫痫发作（从另外一个角度说明葛军「后继有人」）。&lt;/p&gt;

&lt;p&gt;其实写到这里，我开始有些害怕了，不知道我将会在大学面临什么。我当然清楚上大学不是去玩的，可是我究竟会遇见什么呢？&lt;/p&gt;

&lt;p&gt;祝我好运。祝各位好运。&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>taoky</name>
          
          
        </author>
      

      
        <category term="高考" />
      

      
        <category term="高考" />
      
        <category term="杂感" />
      

      
        <summary type="html">其实高考早就结束了，现在写这个东西可能太迟了一点。虽然其实我很早就想开始写了，但我真的懒得去敲键盘码字。</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">从 Jekyll 向 Hexo 迁移</title>
      
      
      <link href="https://taoky.github.io/2017-08-08/migration-to-hexo.html" rel="alternate" type="text/html" title="从 Jekyll 向 Hexo 迁移" />
      
      <published>2017-08-08T20:26:46+00:00</published>
      <updated>2017-08-08T20:26:46+00:00</updated>
      <id>https://taoky.github.io/2017-08-08/migration-to-hexo</id>
      <content type="html" xml:base="https://taoky.github.io/2017-08-08/migration-to-hexo.html">&lt;p&gt;这里已经有很长时间没有更新了……今天突然看到了一些 Hexo 框架的主题，觉得很漂亮，再加上原来使用 Jekyll 的博客目录结构很混乱，我自己也搞不清楚哪个文件夹对应有什么功能，所以最终决定迁移过来。&lt;/p&gt;

&lt;p&gt;界面相比原来要更清晰一些。评论系统将会更换，因为使用 Disqus 的网络情况太过糟糕（不过还好的是，终于有人评论了我……可惜评论迁不过来）。另外将增加（并没有什么用的）站点统计。&lt;/p&gt;

&lt;p&gt;EOF&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>taoky</name>
          
          
        </author>
      

      
        <category term="Hexo" />
      

      
        <category term="Jekyll" />
      
        <category term="Hexo" />
      

      
        <summary type="html">这里已经有很长时间没有更新了……今天突然看到了一些 Hexo 框架的主题，觉得很漂亮，再加上原来使用 Jekyll 的博客目录结构很混乱，我自己也搞不清楚哪个文件夹对应有什么功能，所以最终决定迁移过来。</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">使用 C++ 读取简单的 24、32 位 BMP 图像</title>
      
      
      <link href="https://taoky.github.io/2017-02-06/read-bmp-with-cpp.html" rel="alternate" type="text/html" title="使用 C++ 读取简单的 24、32 位 BMP 图像" />
      
      <published>2017-02-06T00:00:00+00:00</published>
      <updated>2017-02-06T00:00:00+00:00</updated>
      <id>https://taoky.github.io/2017-02-06/read-bmp-with-cpp</id>
      <content type="html" xml:base="https://taoky.github.io/2017-02-06/read-bmp-with-cpp.html">&lt;p&gt;BMP 是 Windows 下常见的一种位图格式。之所以我们选择直接读取 BMP 格式（即不使用其他的库）而非 JPG、PNG 等其他图像格式，是因为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;BMP 的文档是公开的。没有版权、专利问题。&lt;/li&gt;
  &lt;li&gt;运用较广泛，常见。&lt;/li&gt;
  &lt;li&gt;结构相对简单，一般来讲没有压缩，代码容易写。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;接下来，我将尝试用最简单的方式来介绍 BMP 格式的结构，并且尽可能让之后出现的代码不依赖于具体的操作系统平台与特定的编译器实现。建议备一个十六进制查看器以方便理解。&lt;/p&gt;

&lt;p&gt;（下文可能会有错误，并且不会处理「特殊的」BMP 文件。等我高考完之后如果还有兴趣，可能会再去做其他情况下的 BMP 文件读取。）
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;文件头-1bitmapfileheader&quot;&gt;文件头 1：&lt;code class=&quot;highlighter-rouge&quot;&gt;BITMAPFILEHEADER&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BITMAPFILEHEADER&lt;/code&gt; 有四小块。如下表：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;名称&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;大小（字节）&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;介绍&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bfType&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Windows 格式的 BMP 文件为「BM」。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bfSize&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;BMP 文件的大小。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bfReserved1&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;保留值。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bfReserved2&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;保留值。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bfOffBits&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;位图像素内容的偏移量（起始地址）。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;可能没有什么特别的地方，&lt;code class=&quot;highlighter-rouge&quot;&gt;bfType&lt;/code&gt; 中检查是不是 &lt;code class=&quot;highlighter-rouge&quot;&gt;BM&lt;/code&gt; 就行了，OS/2 有其他类型的 BMP 格式，可是也不想想它死了多少年了……&lt;/p&gt;

&lt;p&gt;注意，文件头中的所有数据均以&lt;strong&gt;小端序&lt;/strong&gt;存放。（简单而很不严谨地说，就是字节倒着读）&lt;/p&gt;

&lt;h2 id=&quot;文件头-2bitmapinfoheader&quot;&gt;文件头 2：&lt;code class=&quot;highlighter-rouge&quot;&gt;BITMAPINFOHEADER&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;其实在这个位置是有其他版本的不同的文件头的，但是一般的 BMP 文件都是 &lt;code class=&quot;highlighter-rouge&quot;&gt;BITMAPINFOHEADER&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;它有十一小块，如下表：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;名称&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;大小（字节）&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;介绍&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;biSize&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;此文件头（&lt;code class=&quot;highlighter-rouge&quot;&gt;BITMAPINFOHEADER&lt;/code&gt;）的大小。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;biWidth&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;图像的宽度，以像素为单位。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;biHeight&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;图像的高度，以像素为单位。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;biPlanes&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;图像的色彩平面，正常情况下均为 1。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;biBitCount&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;每个像素的位数。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;biCompression&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;BMP 文件的压缩种类，0 为无压缩。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;biSizeImage&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;位图像素内容的大小，无压缩时可以填 0。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;biXPelsPerMeter&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;图像横向每米存放的像素。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;biYPelsPerMeter&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;图像纵向每米存放的像素。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;biClrUsed&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;图像使用的色彩数，可以为 0。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;biClrImportant&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;图像使用的「重要」的色彩数，0 时均重要。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;因为我们不想写解压算法，所以需要保证处理的 BMP 文件的 &lt;code class=&quot;highlighter-rouge&quot;&gt;biCompression&lt;/code&gt; 为 0。我们之后也不想处理调色板（Color Table, Palette），而是直接读取像素内容，所以需要保证 &lt;code class=&quot;highlighter-rouge&quot;&gt;biBitCount&lt;/code&gt; 为 24 或者 32（即 24 或 32 位的位图），因为它们一般是不含调色板的。&lt;/p&gt;

&lt;p&gt;注意，图像的高度&lt;strong&gt;可以为负&lt;/strong&gt;。负数值表示接下来的像素内容将从左上角从左到右、从上到下读取；而正数值表示接下来的像素内容将从右下角从左到右、从下到上读取。必要的时候请记得取绝对值。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pictures/bmp-cpp/1.png&quot; alt=&quot;对高度取相反数后的结果&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（对 &lt;code class=&quot;highlighter-rouge&quot;&gt;biHeight&lt;/code&gt; 取相反数后的结果，改了四个字节，图像就反过来了～）&lt;/p&gt;

&lt;h2 id=&quot;像素内容&quot;&gt;像素内容&lt;/h2&gt;

&lt;p&gt;接下来就是我们期待的位图像素内容了。我们之前说过&lt;strong&gt;忽略&lt;/strong&gt;了调色板等其他的东西，所以在 &lt;code class=&quot;highlighter-rouge&quot;&gt;BITMAPINFOHEADER&lt;/code&gt; 之后便直接是像素内容了。&lt;/p&gt;

&lt;p&gt;标题中只写了 24 位和 32 位的图像，所以更低的位数不考虑。（毕竟你现在，除了在 gif 动图之外，还能见到 8 位色的图像吗？）&lt;/p&gt;

&lt;p&gt;在 24 位（3 字节）的位图中，每个像素按&lt;strong&gt;顺序&lt;/strong&gt;由三部分组成：蓝色值、绿色值、红色值。32 位（4 字节）的图像添加了 Alpha 透明度部分，在红色值后添加了一字节的 Alpha 值（不透明的 32 位 BMP 图像，每个像素的 Alpha 值字节十六进制均为 &lt;code class=&quot;highlighter-rouge&quot;&gt;FF&lt;/code&gt;）。&lt;/p&gt;

&lt;p&gt;然后我们只需要一个一个读就行了吗？&lt;/p&gt;

&lt;p&gt;当然不是。还有一个特别的注意点：&lt;strong&gt;图像每行的字节大小都必须是 4 字节的倍数。&lt;/strong&gt;不足的需要补齐。当然很明显的是，32 位的 BMP 就不需要考虑这一点了。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;一切准备好了。所以，让我们开干吧。&lt;/p&gt;

&lt;h2 id=&quot;具体实现&quot;&gt;具体实现&lt;/h2&gt;

&lt;p&gt;（这个实现比较草率，因为我确实时间不多了。）&lt;/p&gt;

&lt;p&gt;首先把两个文件头，加上表示像素的结构，包在 &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; 里面：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BITMAPFILEHEADER&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bfType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// must be &quot;BM&quot;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bfSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// the size of the bmp file&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bfReserved1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bfReserved2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bfOffBits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// the offset to the bitmap data&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BITMAPINFOHEADER&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// the size of BITMAPINFOHEADER&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// width (pixels)&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// height (pixels)&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biPlanes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// color planes&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biBitCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// bits per pixel&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biCompression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// type of compression (0 is no compression)&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biSizeImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// the origin size of the bitmap data (before compression)&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biXPelsPerMeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// horizontal pixels per meter&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biYPelsPerMeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// vertical pixels per meter&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biClrUsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// the number of colors used&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biClrImportant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;important&quot; colors, usually 0&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InfoHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pixel&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为了能够把小端序转换成整型变量，我们还需要一个小函数：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ToHumanRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Convert to Big Endian&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在主函数部分，我们先读取文件，然后进行进一步操作：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Parameters Error.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Use: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; xxxx.bmp&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;bmpfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ios&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ios&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// open the file&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bmpfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bmpfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Read BITMAPFILEHEADER&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strncmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bfType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BM&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Judge whether a BMP.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Not a BMP File, or an Unsupported OS/2 BMP File.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bmpfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InfoHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InfoHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Read BITMAPINFOHEADER&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* Information Output */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Output_FileHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Output_InfoHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* Output End */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pixel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadBitmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Read the data&lt;/span&gt;
    
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;PrintLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// Close file and delete vec&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bmpfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Open File Error.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;vector&lt;/code&gt; 是用来储存像素内容的，Output 部分输出 BMP 文件头内容，使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;ReadBitmap()&lt;/code&gt; 读入后等待用户输入坐标，显示对应像素的 RGB 值。&lt;/p&gt;

&lt;p&gt;Output 部分：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Output_FileHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;File Size (BITMAPFILEHEADER): &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ToHumanRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bfSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Reserved 1 (usually 0, BITMAPFILEHEADER): &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ToHumanRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bfReserved1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Reserved 2 (usually 0, BITMAPFILEHEADER): &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ToHumanRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bfReserved2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Bitmap Data Offset (BITMAPFILEHEADER): &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ToHumanRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bfOffBits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Output_InfoHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BITMAPINFOHEADER Size: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ToHumanRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InfoHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;biSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Width (BITMAPINFOHEADER): &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ToHumanRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InfoHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;biWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Height (BITMAPINFOHEADER): &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ToHumanRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InfoHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;biHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Number of Color Planes (BITMAPINFOHEADER): &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ToHumanRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InfoHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;biPlanes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Number of Bits per Pixel (BITMAPINFOHEADER): &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ToHumanRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InfoHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;biBitCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Compression Type (0 is none, BITMAPINFOHEADER): &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ToHumanRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InfoHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;biCompression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Original Size of Bitmap (0 usually if no compression, BITMAPINFOHEADER): &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ToHumanRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InfoHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;biSizeImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Number of Horizontal Pixels per Meter (0 usually, BITMAPINFOHEADER): &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ToHumanRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InfoHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;biXPelsPerMeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Number of Vertical Pixels per Meter (0 usually, BITMAPINFOHEADER): &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ToHumanRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InfoHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;biYPelsPerMeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Number of Color Used (0 sometimes, BITMAPINFOHEADER): &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ToHumanRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InfoHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;biClrUsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Number of Important Color (0 means all is important, BITMAPINFOHEADER): &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ToHumanRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InfoHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;biClrImportant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;写得比较草率。将文件头的内容全部输出。&lt;/p&gt;

&lt;p&gt;读取部分：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;drop_alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToHumanRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InfoHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;biBitCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bmpfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pixel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadBitmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ToHumanRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InfoHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;biHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ToHumanRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InfoHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;biWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linebyte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ToHumanRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InfoHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;biBitCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linebyte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;linebyte&quot; should be the multiple of 4&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// cout &amp;lt;&amp;lt; &quot;Bytes per line: &quot; &amp;lt;&amp;lt; linebyte &amp;lt;&amp;lt; endl;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Offset: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pixel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pixel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Height could be a negative number.&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isBottom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToHumanRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InfoHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;biHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// read from bottom&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;isBottom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;bmpfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isBottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;drop_alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;bmpfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;drop_alpha()&lt;/code&gt; 是为了把 32 位位图中的 Alpha 信息丢掉，方便处理，当然你也可以把它们留着……&lt;code class=&quot;highlighter-rouge&quot;&gt;ReadBitmap()&lt;/code&gt; 部分先计算 &lt;code class=&quot;highlighter-rouge&quot;&gt;offset&lt;/code&gt;（每行需要补齐的字节），再根据高度的正负值分类读取数据。&lt;/p&gt;

&lt;p&gt;最后一个部分，输出 RGB 值：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PrintLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pixel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;完整的代码在&lt;a href=&quot;/attachments/bmp1.cpp&quot;&gt;此&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;参考链接&quot;&gt;参考链接：&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://web.archive.org/web/20080912171714/http://www.fortunecity.com/skyscraper/windows/364/bmpffrmt.html&quot;&gt;The .bmp file format&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/BMP_file_format&quot;&gt;BMP file format (Wikipedia)&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>taoky</name>
          
          
        </author>
      

      
        <category term="程序" />
      

      
        <category term="C++" />
      
        <category term="BMP" />
      

      
        <summary type="html">BMP 是 Windows 下常见的一种位图格式。之所以我们选择直接读取 BMP 格式（即不使用其他的库）而非 JPG、PNG 等其他图像格式，是因为：</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">《你的名字。》观后感——一个关于梦、改变和灾难的故事</title>
      
      
      <link href="https://taoky.github.io/2017-02-02/yourname-my-review.html" rel="alternate" type="text/html" title="《你的名字。》观后感——一个关于梦、改变和灾难的故事" />
      
      <published>2017-02-02T00:00:00+00:00</published>
      <updated>2017-02-02T00:00:00+00:00</updated>
      <id>https://taoky.github.io/2017-02-02/yourname-my-review</id>
      <content type="html" xml:base="https://taoky.github.io/2017-02-02/yourname-my-review.html">&lt;p&gt;《你的名字。》（下简称「君名」）第一次是我在 12 月 2 日和爸妈去电影院看的。记得那天高三破天荒全校第一个放假。一开始是几周前看到一帮人在安利之后想去看的，然后在那天下午看了一遍预告片，感觉……不知道它到底想讲一个什么故事。我很担心君名的风格适不适合我，但最后还是因为好奇心拉着爸妈去看了（虽然我爸更想看《神奇动物在哪里》）。毕竟我没有女票，也没有住得近、一下子就能约出来的朋友，一个人去看也不太可能会被批准的啊 -_-。&lt;/p&gt;

&lt;p&gt;当然看完之后感觉很棒（不然我就不会写这篇观后感了），虽然第一次看之后感觉时间线有点混乱。记得上一次感觉「这部电影好棒啊」的时候是在小高考考完之后去看《疯狂动物城》的那次。&lt;/p&gt;

&lt;p&gt;过了两个月了，我基本把所有能看到的资料都看了一遍，电影又看了两遍——虽然是盗版的片源（YN-009 那个，个人各种原因没有机会再去买电影票了）。或许现在我能用我糟糕的文笔来写写我的想法了吧。下面写的有点乱，见谅。&lt;/p&gt;

&lt;p&gt;（有剧透）
&lt;!--more--&gt;
—&lt;/p&gt;

&lt;h2 id=&quot;梦&quot;&gt;梦&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;梦里相逢人不见，若知是梦何须醒。&lt;/p&gt;

  &lt;p&gt;纵然梦里常幽会，怎比真如见一回。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;据说这首和诗为君名的灵感来源之一。它的内容与君名的情节也是有关联的。对泷和三叶来说何尝不是如此。互相切换到对方的身体中，虽然切换后的经历实际上对现实世界是有影响的，但对对方而言，这确实是像一场梦。这场梦中的记忆在恢复正常醒来后就渐渐消失，正如我们平常做梦时的体验一样。&lt;/p&gt;

&lt;p&gt;在电影中，他们在长大之前只真正相见过一次。而他们这一次真正的相见，在「黄昏之时」的作用下，也像梦一样跨越了 3 年的时间差（2013、2016），才短暂地实现。&lt;/p&gt;

&lt;p&gt;不过最终电影给我们的是一个美好的结局。尽管双方的记忆都已经淡忘，但这样一系列的梦所留下的印象与双方的勇气造就了他们最终的相遇。虽然可惜他们忘记了交换身体、拯救糸（丝，sī）守镇的经历，但至少他们能够相遇并认出彼此，不再像梦一样虚幻、模糊，而不是跟《秒速五厘米》中贵树与明里最后被两辆相向而行的列车隔开的结局一样。&lt;/p&gt;

&lt;h2 id=&quot;改变&quot;&gt;改变&lt;/h2&gt;

&lt;p&gt;君名比较明显能让人感受到的一个主题就是「改变」。居住在糸守镇的三叶厌倦了她的乡村生活——缺少咖啡厅等现代化生活的元素、与镇长父亲之间的隔阂、继承传统宗教风俗的尴尬与在学校里缺少朋友的状况，给她的生活蒙上了一些阴影，甚至让她喊出「请让我来世变成东京的帅哥吧」这样看上去有点「无厘头」的话。&lt;/p&gt;

&lt;p&gt;同样，在泷的一方，虽然他和朋友们相处融洽，但从他的日记可以看出，在三叶到来之前，他的生活也是单调的。但在两人交换身体之后，他们给对方带来了积极的改变。在约 4 分钟的《前前前世》歌曲的一段中，君名用片段的方式展现了双方交换之后的状态。泷用自己「霸气」的表现帮三叶在学校中建立威望，反抗欺凌，甚至让她同时收到男女生的表白。而三叶则帮助泷与前辈建立关系，最后还为他安排好了一场约会……影片中这一段非常有趣，用不太多的画面展现出了这样的「改变」。&lt;/p&gt;

&lt;p&gt;而这样的一种改变，让泷在交换停止后决定以他仅有的几幅糸守画像为线索，动身去找三叶，也让三年前的她在彗星到来的前一天（用她好几个月的生活费）去东京找泷，尽管她三年前的尝试最终失败了（毕竟当时泷还不认识三叶）。这样的改变也解释了为什么在多次的交换身体后泷会渐渐喜欢三叶，而不是无缘无故地产生好感。&lt;/p&gt;

&lt;h2 id=&quot;灾难&quot;&gt;灾难&lt;/h2&gt;

&lt;p&gt;君名中出现的那颗可怕的彗星三次砸向糸守镇（概率很小的事情啊……里面一定有「幕后黑手」（笑））。而这颗虚构的彗星并非完全空穴来风，它实则暗示 2011 年 3 月 11 日发生在日本东北部的大地震。正如彗星将整个小镇毁灭一样，那场地震也破坏了大量的城镇，夺走了一万多人的生命。&lt;/p&gt;

&lt;p&gt;可能 311 地震给日本带来的影响近似于 08 年四川汶川大地震给我们带来的心理影响。我没有经历过什么大的自然灾害，所以并没有什么太深的感觉。但是我可以理解当昨天还能开开心心聊天的朋友在今天他，连他所属的小镇都在地图上抹去时的感受。每天都要担心灾害降临的感觉是很可怕的，毕竟这是一个多灾多难的地方。&lt;/p&gt;

&lt;p&gt;所以在君名最后，长大后的泷找工作面试时会说「你不知道东京哪天也会消失，所以哪怕只能留下记忆……」如果一切都会有终结，留下一片记忆，一块自己在今生今世存在过的证据，或许也是可以的啊。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;关于其他&quot;&gt;关于其他……&lt;/h2&gt;

&lt;p&gt;第一遍看完君名后我隐约有这样一种感觉：「要是这个故事是真的，那该有多美好啊」。尽管若深究下去，它在情节等方面的漏洞并不少，还有那个在我看的时候瞬间让我出戏的 Google 的图标（2013 年的时候 Google 还没有换新图标，但在电影里三叶（实际是泷）与朋友计划拯救糸守镇时（2013）出现了新图标）。&lt;/p&gt;

&lt;p&gt;但至少我个人认为这是一部佳作，并且它成功让我难以释怀了很长一段时间（笑）。它的结局不再是像新海诚之前的电影一样的悲剧结局（如果是悲剧的话，恐怕难以接受吧……），可我看完之后甚至有点孤独的感觉，不知道怎么说才好。&lt;/p&gt;

&lt;p&gt;另外，君名的音乐很赞，推荐。&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>taoky</name>
          
          
        </author>
      

      
        <category term="影评" />
      

      
        <category term="影评" />
      
        <category term="《你的名字。》" />
      

      
        <summary type="html">《你的名字。》（下简称「君名」）第一次是我在 12 月 2 日和爸妈去电影院看的。记得那天高三破天荒全校第一个放假。一开始是几周前看到一帮人在安利之后想去看的，然后在那天下午看了一遍预告片，感觉……不知道它到底想讲一个什么故事。我很担心君名的风格适不适合我，但最后还是因为好奇心拉着爸妈去看了（虽然我爸更想看《神奇动物在哪里》）。毕竟我没有女票，也没有住得近、一下子就能约出来的朋友，一个人去看也不太可能会被批准的啊 -_-。</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">无标题</title>
      
      
      <link href="https://taoky.github.io/2017-01-17/untitled.html" rel="alternate" type="text/html" title="无标题" />
      
      <published>2017-01-17T00:00:00+00:00</published>
      <updated>2017-01-17T00:00:00+00:00</updated>
      <id>https://taoky.github.io/2017-01-17/untitled</id>
      <content type="html" xml:base="https://taoky.github.io/2017-01-17/untitled.html">&lt;p&gt;/*&lt;/p&gt;

&lt;p&gt;这是一篇风格随意的自编小说，灵感源于敝校期末作文讲义第一篇文章的标题。已经有 1 年没有在博客上写什么东西了。趁这个机会让它「苏醒」一下吧。&lt;/p&gt;

&lt;p&gt;献给所有有着「作文写作困难症」的同学。&lt;/p&gt;

&lt;p&gt;*/&lt;/p&gt;

&lt;p&gt;他新建了一个文档。
&lt;!--more--&gt;
空窗口。标题栏写着「Untitled」，窗口的左上角是红绿灯式的窗口控制按钮——分别是红色的关闭、黄色的最小化、绿色的全屏。但他暂时还不想去碰它们中的任何一个。他只将窗口拉到中央，看着右上角的「0 Words」，又看着闪烁着的光标。发呆。&lt;/p&gt;

&lt;p&gt;他是怎么新建这个文档的呢？文件管理器里右键只有「新建文件夹」。他当然不会把文件夹当作文档的啊，因为它们不是文件——等一下，他想起来，在 Unix 的「哲学」体系中，没有什么东西不是文件啊，显示器是，打印机是，他自己应该也是的吧。文件是「绳结」啊，所以文件夹是文件，所以自己错了。他连忙下意识按了几下 &lt;code class=&quot;highlighter-rouge&quot;&gt;delete&lt;/code&gt; 键，可屏幕上什么反应都没有。他只能听到细小的模拟打字机音效的声音。&lt;/p&gt;

&lt;p&gt;而这细小的「嚓嚓」声把他拉回了现实。他望了望那张纸，上面写着他所需要遵循的各类要求。于是，他脑海中出现了一个中心主题结点，在它的周围围绕着各种各样稀奇古怪的名词，但他，用了不知多少个五分钟，却找不到一条与结点相连的边。那些名词一点一点散去，最终一切消失殆尽，除了那个中心主题结点。这张图（如果在数学上还算是的话）只有结点，还只有一个，而且没有边。真是无聊。&lt;/p&gt;

&lt;p&gt;他瞪大眼睛看着屏幕，看着最顶上的菜单栏，嘴唇轻微颤动着：「File. Edit. Paragraph. Format. View. Themes. Window. Help. Help. Help…」他最终在「Help」选单处陷入了一个死循环。他还真的去点了点。他渴望帮助，但这里的帮助，却不是他想要的。&lt;/p&gt;

&lt;p&gt;他要疯了。他想撕掉那张纸，可没法撕掉。他想关闭这个空荡荡的文本界面，于是大拇指按下 &lt;code class=&quot;highlighter-rouge&quot;&gt;Command (⌘)&lt;/code&gt; ，食指碰到了 &lt;code class=&quot;highlighter-rouge&quot;&gt;Q&lt;/code&gt; 键，却停了下来。他冷静了一些。他瞄了眼时间，距离他新建文档，已经有一个小时过去了。也许他应该选择一个更加「心无杂念」的界面。因此，他移动指针到「全屏」按钮，手指在触控板上一点。一个看烦了的动画效果。全屏了。这是真正的空白，除却那个依旧在原位闪烁的光标之外。&lt;/p&gt;

&lt;p&gt;可那个结点，那个中心主题结点，又出现了，好像是印在电脑屏幕上一样。他不想再去看那个结点了。他手指在触控板上用力回旋着，想甩掉那个点，可他只获得了一个放大了的指针。或许他应该听一会儿音乐吧，他想。轻拍了一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;F8&lt;/code&gt; 键，音乐就开始播放了。那个按键上面是一个等边三角形，和两个矩形，以特定的方式排列，就拥有了播放与暂停的隐喻。他听着音乐，继续发呆。他现在能且仅能做这件事情了。&lt;/p&gt;

&lt;p&gt;所以已经过去了三个小时，他什么都没——好像这么说有失偏颇，毕竟他还是在电脑以为无人操作，将屏幕变暗的时候，蹭了蹭触控板的。死线要到了，他不能再这么下去了。他关闭了全屏。开始真正郑重其事地把手放在键盘上。&lt;/p&gt;

&lt;p&gt;然后呢？&lt;/p&gt;

&lt;p&gt;他把那张纸扔在了一旁不看。脑子里终于出现了一个框架，虽然简陋，而且不合「主题」。&lt;/p&gt;

&lt;p&gt;他终于开始输入了第一句有意义的句子：&lt;/p&gt;

&lt;p&gt;「他新建了一个文档。」&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>taoky</name>
          
          
        </author>
      

      
        <category term="小说" />
      

      
        <category term="作品" />
      

      
        <summary type="html">/*</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">信任与不信任</title>
      
      
      <link href="https://taoky.github.io/2015-09-27/trusting-or-not.html" rel="alternate" type="text/html" title="信任与不信任" />
      
      <published>2015-09-27T00:00:00+00:00</published>
      <updated>2015-09-27T00:00:00+00:00</updated>
      <id>https://taoky.github.io/2015-09-27/trusting-or-not</id>
      <content type="html" xml:base="https://taoky.github.io/2015-09-27/trusting-or-not.html">&lt;p&gt;XcodeGhost 应该是创下了 App Store 的先河了，之前里面曾出现过的恶意软件应该不会超过个位数，但自从爆发之后，这种安全性就有点被打破了的味道。归根到底，就是开发者没有安全意识，或者说是过于天真吧。&lt;/p&gt;

&lt;p&gt;这件事情其实各方都有责任，Apple 的 Mac App Store 做得实在太差：经常连接不上，连接上了还很难下载：经常下载到一半就失败了；Apple Developer Program 没有提供 sha1 校验码；开发者作死关了 Gatekeeper，不了解 OS X 应用的数字证书……这件事闹得太大，很多著名应用被感染，以至于 Apple 发出了一个&lt;a href=&quot;http://www.apple.com/cn/xcodeghost/&quot;&gt;申明&lt;/a&gt;。
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;不过，这件事情也是很让人大开眼界的：原来在 IDE 里也可以做手脚！然而 XcodeGhost 并不是第一个做这件事的。Ken Thompson，UNIX 的创造者之一，在他获得图灵奖后做了一个演讲：「Reflections on Trusting Trust」。演讲中他证明了可以在编译器里加入代码，使得编译出来的程序（包括编译器自己）都是有问题的。也就是说，不管有问题的编译器用正确的代码自举（Bootstrap）多少次，结果还是有可能有问题。在最后一部分，他说了这样一句话：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can’t trust code that you did not totally create yourself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果在一个不被信任的平台上建东西，无论建造过程有多么规范严谨，它也不应该被信任。这样想想其实挺恐怖的：你信任你的编译器吗？你信任你的操作系统吗？你信任你的 BIOS/UEFI 吗？你信任你的硬件吗？&lt;/p&gt;

&lt;p&gt;恐怕到最后，结果只有「不」这个字了。&lt;/p&gt;

&lt;p&gt;说到这个，我想到了 Richard Stallman。他用的笔记本从操作系统到 BIOS 全部都是开源的（因此他还用过龙芯的笔记本，不过在 2012 年被偷了）。现在把所有的软件和固件全部都换成开源的并不是很现实的事情。诚然大部分都可以替换，但 Flash 呢？各种各样的音视频格式呢？驱动程序呢？以前我看到有人说「RMS 永远是对的」，现在想来，他至少在这件事情上虽然太过激了点，但确实是对的。&lt;/p&gt;

&lt;p&gt;你看不出闭源的东西里面构造是什么，那么开源的也可以完全信任吗？不。诚然，开源程序可以看到内部的构造，然而可能根本没耐心看、看不懂或是没有发现隐蔽的问题。开源有时比闭源更加可以信任些，但也很难达到「完全信任」的程度，不然 OpenSSL 的「心脏流血」就不会隔这么长时间才被发现了。毕竟，大部分人都不会自己去编译的，而是用别人编译好的二进制文件。&lt;/p&gt;

&lt;p&gt;说到底，做到使用环境能被「完全信任」实在太难，更别说「人」自己也没有办法被完全信任。&lt;/p&gt;

&lt;p&gt;这个问题，恐怕找不到一个完美的解决方案。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;据说写 XcodeGhost 的作者还是个学生。我只能用 Ken Thompson 演讲的最后一段来说了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I have watched kids testifying before Congress. It is clear that they are completely unaware of the seriousness of their acts. There is obviously a cultural gap. The act of breaking into a computer system has to have the same social stigma as breaking into a neighbor’s house. It should not matter that the neighbor’s door is unlocked. The press must learn that misguided use of a computer is no more amazing than drunk driving of an automobile.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;现在媒体「misguide」的情况不多了，但如果 XcodeGhost 的编写者真的只是学生，真是只是像他声明里面说的那样没有恶意的话，那他就是「completely unaware of the seriousness of their acts」。&lt;/p&gt;

&lt;p&gt;唉。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;附：我对演讲 Reflections on Trusting Trust 的渣翻译&lt;/p&gt;

&lt;h4 id=&quot;简介&quot;&gt;简介&lt;/h4&gt;

&lt;p&gt;我感谢 ACM 给我这个奖项。我不得不感觉到我得到了这个奖是因为机缘巧合和技术的价值。UNIX 迅速流行，给工业从 central main frames（？）到 autonomous minis（？）带来了巨大改变。我推测 Daniel Bobrow 会代替我站在这里，如果他付不起一台 PDP-10 并且要付清 PDP-11 的欠款的话。此外，现在 UNIX 的情况是由许许多多人的辛勤劳动建筑成的。&lt;/p&gt;

&lt;p&gt;有句老话，「和那个带你来的人跳舞」（Dance with the one that brought you），意思是说我应该谈谈 UNIX 了。我已经很长时间没有为主流 UNIX 工作了，但我仍旧继续因为其他人的工作而得到不应有的赞扬。所以，我不想再谈 UNIX 了，但我想感谢每个作出贡献的人。那把我带给了 Dennis Ritchie。我们的合作已成为一件美好的事情。在我们过去共同工作的十年里，我只能回忆起一件协作不佳的事。那一次，我发现我们都写了相同的 20 行的汇编程序。我对比了源代码，震惊地发现它们每个字符都毫无差别。我们共同工作的结果已经大大超过我们各自的贡献。我是一个程序员。在我的 1040 税收表格上，我的职业就是这么写的。我想给你们展示一下我曾写过的最可爱的程序。我用三步做了这件事，并且最后把它们放在了一起。&lt;/p&gt;

&lt;h4 id=&quot;第一步&quot;&gt;第一步&lt;/h4&gt;

&lt;p&gt;在大学里有电子游戏之前，我们用展示编程练习的方式来愉悦自己。我的其中一个最爱，就是写出最短的可以自我复制的程序。既然这是一个与现实分离的练习，我经常用的是 FORTRAN。的确，选择 FORTRAN 语言的原因和二人三足游戏流行的原因，是一样的。&lt;/p&gt;

&lt;p&gt;更清晰地说，这个问题是写出一个源码，当它被编译并执行时，会输出一份自身源代码的精确复制。如果你从来都没有做过这种事情，我强烈建议你自己去试试。自己去探寻如何做事情是一次披露，这远胜过任何被别人告知如何去做的好处。所谓「最短」只是一种刺激来证明技能以及选出冠军。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;sc&quot;&gt;'\t'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;sc&quot;&gt;'}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;sc&quot;&gt;';'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;sc&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;sc&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;删除了&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;213&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;行&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*
 * 字符串 s 是一个
 * 对从 '0' 到结尾的
 * 主体程序的
 * 描述。
 */&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;char&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s[ ] = {&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%d, &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;这里是一些简单的翻译，&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;使得一个不编写&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的程序员也能看懂这段程序。&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;		&lt;span class=&quot;err&quot;&gt;赋值&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;		&lt;span class=&quot;err&quot;&gt;等于&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;		&lt;span class=&quot;err&quot;&gt;不等于&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;		&lt;span class=&quot;err&quot;&gt;增加&lt;/span&gt;
&lt;span class=&quot;sc&quot;&gt;'x'&lt;/span&gt;		&lt;span class=&quot;err&quot;&gt;简单的字符常量&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;xxx&quot;&lt;/span&gt;	&lt;span class=&quot;err&quot;&gt;多重字符串&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;		&lt;span class=&quot;err&quot;&gt;转换到十进制数格式&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;		&lt;span class=&quot;err&quot;&gt;转换到字符串格式&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;tab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;制表符&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;		&lt;span class=&quot;err&quot;&gt;新行符号&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;插图 1&lt;/em&gt;（注：原来是图片）&lt;/p&gt;

&lt;p&gt;插图 1 向我们展示了一个用 C 语言编写的自我复制程序。（纯粹主义者会说这个程序并不完全是一个自我复制程序，但会产生一个自我复制程序）这东西太大，没法拿奖，但它证明了这项技术，并且我需要两个重要的特性来完成我的故事：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;这个程序可以容易地被另一个程序编写&lt;/li&gt;
  &lt;li&gt;这个程序可以包含一个任意数量的过度超重的行李（？，excess baggage）来被与主算法一起复制。在这个例子里，甚至是注释也被复制了。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;第二步&quot;&gt;第二步&lt;/h4&gt;

&lt;p&gt;C 编译器是用 C 语言编写的。我想说的是这个其中一个在编译器用它们自己的语言编写时的「先有鸡还是先有蛋」问题。这个例子里，我会用一个 C 编译器中的特定例子。&lt;/p&gt;

&lt;p&gt;C 允许一个字符串结构来具体说明一个已被初始化的字符数组。在字符串中的单独的字符可以被转义到显示不可打印字符。比如说，&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;相当于一个包含字符 &lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt; 的字符串，它表示新行符号。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\\'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\\'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\\'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;插图 2&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;插图 2 是一个理想化的在 C 编译器中的代码来解释字符转义序列。这是段令人惊奇的代码。它用一种很方便的方式「知道」在任意字符集下什么字符代码被编译成新行。这种知道的艺术允许它自编译，所以延续了知识（？）。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\\'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\\'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\\'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'v'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\v'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;插图 3&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;假设我们希望改变 C 编译器来包括序列 &lt;code class=&quot;highlighter-rouge&quot;&gt;\v&lt;/code&gt; 显示垂直制表符字符。这个对插图 2 的扩展是明显的，并且在插图 3 中显示。我们随后重新编译 C 编译器，但我们得到了一个问题。显然，这个二进制版本的编译器不知道什么是 &lt;code class=&quot;highlighter-rouge&quot;&gt;\v&lt;/code&gt;，源码并不是合法的 C 代码。我们必须「训练」编译器。在它知道 &lt;code class=&quot;highlighter-rouge&quot;&gt;\v&lt;/code&gt; 是什么后，我们的新改动会变成合法的 C 代码。我们去查了查 ASCII 表格，发现垂直制表符是十进制的 11。我们把我们的代码变得像插图 4 那样。现在老编译器接受了新代码。我们安装编译出来的二进制文件作为新的正式 C 编译器，并且现在我们可以写出方便的版本，就像插图 3 中那样。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\\'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\\'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\\'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'v'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;插图 4&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;这是一个深入的概念。这是我见过的很靠近「学习」程序的代码。你简要地辨别它一次，然后你可以用这个自引用的定义。&lt;/p&gt;

&lt;h4 id=&quot;第三步&quot;&gt;第三步&lt;/h4&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;插图 5&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;再一次，在 C 编译器中，插图 5 显示了当例行代码「compile」被调用来编译下一行代码时对 C 编译器高级别的控制。插图 6 展示了一个对编译器简单的修改使得它当符合一个特定的模式时故意编译错源代码。如果这不是故意的，它被称为一个编译器「漏洞」。既然它是故意的，它应该被称为一个「特洛伊木马」。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pattern&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;插图 6&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;我植入编译器的真实的代码会匹配 UNIX 中「login」命令的代码。这种替换代码可以错误编译 login 命令，所以它会接受将要加密的密码或是一个特定的已知密码。所以如果这段代码被安装到二进制文件中并且这个二进制文件被用来编译 login 命令，我就能以任意用户的身份自由驰骋于系统之中。&lt;/p&gt;

&lt;p&gt;这么明显的代码不会很长时间都不被发现的。即便是最偶然的细读代码也会招致怀疑。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pattern1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bug1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pattern2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bug2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;插图 7&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;最后一步在插图 7 中显示。这只是简单添加了第二个特洛伊木马到那个已经存在问题的代码中。第二段模式是作用于 C 编译器的。这个在第一步中自我复制的替换代码向编译器插入了两个特洛伊木马。这需要一个在第二步中的学习阶段。首先我们在正常 C 编译器上编译被修改过的代码来产生一个有问题的二进制文件。我们将这个二进制文件作为正式的 C 编译器。我们现在可以去除编译器代码中的漏洞，并且新二进制在它被编译时会被重新插入漏洞。当然了，那个 login 命令将会一直保留漏洞，而在代码中了无踪迹。&lt;/p&gt;

&lt;h4 id=&quot;寓意&quot;&gt;寓意&lt;/h4&gt;

&lt;p&gt;寓意很明显。你不能相信不是你自己写的代码。（特别是像招聘了我这样的人的公司的代码）没有代码级别的认证与检查会保护你不使用不可信任的代码。在证明了这种攻击的可行性后，我选中了 C 编译器。我本可以选择任何处理程序的程序，比如说汇编器、加载器，甚至于硬件微代码（microcode）。当程序的级别变得更低时，这些漏洞会变得越来越难找。一个恰当安装的微代码漏洞几乎是不可能发现的。&lt;/p&gt;

&lt;p&gt;在努力使你信服我不能被相信之后，我希望来说教一番。我想要批评媒体在处理「黑客」时的方式，比如说 414 帮、Dalton 帮之类的。这些小孩子做的行为是最具有破坏性的并且这些擅自进入与偷窃行为是最糟糕的。只是这些不充足的刑事规范使得他们免于极为严厉的起诉。受到这种行为影响的公司（最大的公司是非常容易受影响的）正在努力推进刑事规范的升级。未授权的计算机系统访问在一些州已是一个大问题，并且正在针对越来越多州的更多立法机构和议会。&lt;/p&gt;

&lt;p&gt;这种一触即发的状况正被酝酿。一方面，媒体、电视和电影正给这些蓄意破坏者造势，称他们为行家（？, whiz）小子；另一方面，这些小孩子做的行为很快会被年复一年的监禁处理。&lt;/p&gt;

&lt;p&gt;我看过一些孩子在议会前的作证。很明显，他们完全不知道他们行为的严重性。有一道很明显的文化代沟。这种闯入计算机系统的行为与闯入邻居家屋子的行为都是社会的耻辱。邻居家门关没关并没有什么关系。媒体必须认识到计算机的错误使用并不比酒后驾车有趣多少。&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>taoky</name>
          
          
        </author>
      

      
        <category term="随想" />
      

      
        <category term="安全" />
      
        <category term="信任" />
      
        <category term="系统" />
      

      
        <summary type="html">XcodeGhost 应该是创下了 App Store 的先河了，之前里面曾出现过的恶意软件应该不会超过个位数，但自从爆发之后，这种安全性就有点被打破了的味道。归根到底，就是开发者没有安全意识，或者说是过于天真吧。</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">OS X 下的 App 数字证书和更多</title>
      
      
      <link href="https://taoky.github.io/2015-09-26/the-codesign-in-osx.html" rel="alternate" type="text/html" title="OS X 下的 App 数字证书和更多" />
      
      <published>2015-09-26T00:00:00+00:00</published>
      <updated>2015-09-26T00:00:00+00:00</updated>
      <id>https://taoky.github.io/2015-09-26/the-codesign-in-osx</id>
      <content type="html" xml:base="https://taoky.github.io/2015-09-26/the-codesign-in-osx.html">&lt;p&gt;最近的 XcodeGhost 事情闹得沸沸扬扬，大家都被吓得不轻。假的 Xcode 这么长时间没有被发现，一方面可能是关掉了 Gatekeeper 的原因；另一方面，有时开了 Gatekeeper 还是没有被检测出来，并且表面上是看不出来程序有没有数字签名的，不像 Windows 里面右键属性就可以看到。
&lt;!--more--&gt;&lt;/p&gt;
&lt;h3 id=&quot;gatekeeper-是什么它出了什么问题&quot;&gt;Gatekeeper 是什么？它出了什么问题？&lt;/h3&gt;

&lt;p&gt;Gatekeeper 可以检查下载到电脑中的 App 是否有数字签名，文件是否被篡改。如果检测到问题，它会停止应用的运行。然而，它只会检查从互联网上下载的应用。&lt;/p&gt;

&lt;p&gt;根据 Apple 官方给的&lt;a href=&quot;https://support.apple.com/zh-cn/HT202491&quot;&gt;帮助&lt;/a&gt;，Gatekeeper 在检测有问题的 App 时会有如下信息：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;仅允许 Mac App Store 应用时其它的应用都会被阻止，提示「打不开“XXX”，因为它不是从 Mac App Store 下载的。」&lt;/li&gt;
  &lt;li&gt;仅允许 Mac App Store 和被认可的开发者时未签名或已被篡改的应用会被阻止，提示「打不开“XXX”，因为它来自身份不明的开发者。」&lt;/li&gt;
  &lt;li&gt;允许任何来源时被篡改的应用仍然会被阻止，提示「“XXX”已损坏，打不开。您应该将它移到废纸篓。」&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;“不对啊，那 Gatekeeper 也应该检测出有问题的 Xcode 并阻止它运行啊。”&lt;/p&gt;

&lt;p&gt;Gatekeeper 是通过 com.apple.quarantine 标记来判断文件是否从互联网上下载的。标记可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;xattr&lt;/code&gt; 来查看。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  Downloads  xattr -l *.app             
CheatSheet.app: com.apple.quarantine: 0023;00000000;The\x20Unarchiver;8F22E217-7ED8-44D7-B11F-88B319E5B82E
Retinizer.app: com.apple.quarantine: 0043;00000000;The\x20Unarchiver;5E278371-834C-4C31-BC70-58E89F7CD0AF
diumoo.app: com.apple.quarantine: 0003;00000000;The Unarchiver;C91583C2-3D0B-4639-A2D7-41C37AEF5650
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这是 xattr 在我的电脑的下载目录里的运行结果。从 quarantine 中可知这三个应用都是从网络上下载的。（并且还有一些别的内容，比如说都是用「The Unarchiver」解压缩的）&lt;/p&gt;

&lt;p&gt;有些程序在下载的时候并没有设置 quarantine 标记，Gatekeeper 就不会检查，于是……（其实我觉得它不应该只检查从互联网上下载的应用，应该检查所有的应用才是正常的啊）&lt;/p&gt;

&lt;p&gt;再说了，就算 Gatekeeper 提示了问题，也挡不住想死的人的步伐：可以直接关掉 Gatekeeper，可以右键打开（打开过后 Gatekeeper 就再也不会检查），还可以在终端里开……&lt;/p&gt;

&lt;h3 id=&quot;检查数字签名&quot;&gt;检查数字签名&lt;/h3&gt;

&lt;p&gt;要检查应用的数字签名似乎只能在终端下。&lt;code class=&quot;highlighter-rouge&quot;&gt;codesign&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;spctl&lt;/code&gt; 可以用来检查应用的数字签名。&lt;/p&gt;

&lt;h4 id=&quot;codesign&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;codesign&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;codesign&lt;/code&gt; 可以来检查应用是否签名以及签名后是否被篡改。&lt;/p&gt;

&lt;p&gt;如果一切正常，显示如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  /Applications  codesign -vv iTunes.app 
iTunes.app: valid on disk
iTunes.app: satisfies its Designated Requirement
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果应用被篡改过，显示如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  /Applications  codesign -vv VLC.app 
VLC.app: a sealed resource is missing or invalid
file added: /Applications/VLC.app/Contents/MacOS/plugins/plugins.dat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果应用压根没有签名，显示如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  /Applications  codesign -vv OnyX.app 
OnyX.app: code object is not signed at all
In architecture: x86_64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;spctl&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;spctl&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;spctl&lt;/code&gt; 可以用来看是谁给应用签名，当然也可以同时检查签名是否正常。&lt;/p&gt;

&lt;p&gt;系统应用：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  /Applications  spctl -avv iTunes.app 
iTunes.app: accepted
source=Apple System
origin=Software Signing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Mac App Store 上下载的应用：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  /Applications  spctl -avv GeoGebra\ 5.app 
GeoGebra 5.app: accepted
source=Mac App Store
origin=Apple Mac OS Application Signing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其它开发者（就是 Gatekeeper 里面的「被认可的开发者」）授权获得的证书签名的应用：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  /Applications  spctl -avv NeteaseMusic.app 
NeteaseMusic.app: accepted
source=Developer ID
origin=Developer ID Application: NetEase (Hangzhou) Network Co., Ltd. (J669Y64Z9Y)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;被篡改过的应用：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  /Applications  spctl -avv VLC.app 
VLC.app: a sealed resource is missing or invalid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;没有签名的应用：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  /Applications  spctl -avv OnyX.app        
OnyX.app: rejected
source=no usable signature
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果说这个应用的签名者有问题（比如像 Windows 里面，从百度一不小心下载的 Chrome 安装包却是百度的签名）的话，那这个应用也是有问题的。&lt;/p&gt;

&lt;p&gt;以上。&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>taoky</name>
          
          
        </author>
      

      
        <category term="安全" />
      

      
        <category term="数字证书" />
      
        <category term="安全" />
      
        <category term="App" />
      

      
        <summary type="html">最近的 XcodeGhost 事情闹得沸沸扬扬，大家都被吓得不轻。假的 Xcode 这么长时间没有被发现，一方面可能是关掉了 Gatekeeper 的原因；另一方面，有时开了 Gatekeeper 还是没有被检测出来，并且表面上是看不出来程序有没有数字签名的，不像 Windows 里面右键属性就可以看到。 Gatekeeper 是什么？它出了什么问题？</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">杂记</title>
      
      
      <link href="https://taoky.github.io/2015-09-03/somethink.html" rel="alternate" type="text/html" title="杂记" />
      
      <published>2015-09-03T00:00:00+00:00</published>
      <updated>2015-09-03T00:00:00+00:00</updated>
      <id>https://taoky.github.io/2015-09-03/somethink</id>
      <content type="html" xml:base="https://taoky.github.io/2015-09-03/somethink.html">&lt;p&gt;我发现似乎我在暑假里并没有在这里写过东西，或者说这里看上去已经「荒废」掉了。当然其中的主要原因是时间分配问题：当我想写点什么的时候发现没有时间，当我有时间的时候我什么都不想写了。而且我本来意图是想把这里变成一个共同记录下生活与技术的地方。结果现在我更想写生活，但又不想透露出所有的事情，总之内心的想法很复杂，但总也实现不了啦。&lt;/p&gt;

&lt;p&gt;暑假里只是对网页的代码做了一点极小的「更新」。加引号是因为加的部分没啥用，只是使用 Javascript 做一下尝试罢了。&lt;/p&gt;

&lt;p&gt;开学前一天我发现连接似乎超时了，所以我那时在找替代方案，但是现在可以连了，替代方案什么的以后再说吧。
&lt;!--more--&gt;
—&lt;/p&gt;

&lt;p&gt;记得我在暑假开始的时候计划学一下 Qt，可是学了几天后我很快就遇到了瓶颈（比我想象的来得快得多）：C++ 的各种面向对象的特性，因为我平时都不用（估计是写竞赛代码写习惯了），所以要花很长时间反应：「咦，这是什么鬼，还能这么写！」，信号槽也在一开始把我坑得死去活来，主要是 Qt 5 后的新信号槽语法有时候会碰到函数重载冲突的问题，然而新语法可以在编译时检测编写错误；旧语法虽然没有这个问题，但不能在编译时检测。于是最后我决定……还是等上大学的时候再学吧。高中留下的时间不太多了。&lt;/p&gt;

&lt;p&gt;其实我一开始想学的时候是有最终计划的，想写个小程序在她生日的时候送给她。但自然地，现在这个计划就完不成了。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;暑假一开始放假的时候觉得很开心，虽然被统一「克扣」了十天的假期。后来生病了，发高烧连续十天（当然三天后吃退烧药可以退，但会反复），一直在医院和家中往返，最后还住进了观察室（这是第二次了）。扎针扎多了的感觉极为不好受，时间长了手都是僵硬的。第一天我跟老邓说我发烧的时候她说「生病很幸福」，在那几天我从未感受到这一点。后来想通了，也许的确是这样，仅限于在要上学的时候生 2～3 天就好的小病。&lt;/p&gt;

&lt;p&gt;可这是暑假时光啊，可这用了我十天时间啊。&lt;/p&gt;

&lt;p&gt;当然，从辩证法的角度来讲，生病也有它好的一面。那段时间里我认识了不少药物的名字（尽管现在全忘了），知道了退烧药会让白细胞数量下降（差点降到临界值），品尝了 KCl 的味道（难喝死了！），同时观察室有免费的 Wi-Fi 连接，听了一些新歌……还有，观察室的医生劝我学医（虽然我一直决心进计算机系）。&lt;/p&gt;

&lt;p&gt;生病给我带来的直接后果是：作业来不及了。我现在仍对「智慧」这篇作文记忆犹新，因为它花费了我三天的时间我才写完，而最后那天是 8 月 30 日。不过当我知道老邓的作业进程比我还慢时心里稍微安定了些（这不知是不是算是幸灾乐祸吧）。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;写到这里我突然想到我必须要吐槽&lt;del&gt;一个&lt;/del&gt;两个东西：OS X Yosemite 和 iOS 7 / 8。&lt;/p&gt;

&lt;p&gt;记得我在&lt;a href=&quot;/2014-12-31/hello-2015.html&quot;&gt;这篇&lt;/a&gt;开头曾经称赞过 OS X。确实不错。但是自打 Apple 进入扁平化之后就明显感觉 bug 在飞速增多。举个例子，OS X 10.10.4 之前采用了新的 DNS 解析进程 discoveryd 替代老的 mDNSResponder，据说是有人看到 mDNSResponder 里面解决跨平台问题的代码太多，于是重新写了一个。可是新的 discoveryd 里面的 bug 实在太多……于是 10.10.4 后又换回来了。&lt;/p&gt;

&lt;p&gt;唉。升级之后的明显感觉就是大问题没有，小问题不少，而且速度也不快。&lt;/p&gt;

&lt;p&gt;等 9 月 9 日的 WWDC 推出 OS X El Capitan 和 iOS 9 吧。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;说到 OS X El Capitan，我突然想到了新的「rootless」特性，就是被称为「系统完整性保护」（System Integrity Protection, SIP）的特性。简单的说，就是即便获得了 root（系统最高管理员）的权限，也没有什么用，系统文件还是改不了。&lt;/p&gt;

&lt;p&gt;不知道我那时候还能不能用得习惯了。而且如果 iOS 9 也有这个特性的话，可以想象越狱的难度会进一步加大。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;8 月 20 日至 27 日是去学校信息集训。有趣的是，物理和化学的时间与这是相同的，于是上下午机房里只有四个人，后来人稍微多了点。&lt;/p&gt;

&lt;p&gt;集训主要内容就是刷题，这个没有什么好说的。坐在我右边的是钱逗，他这几天就是刷一会儿题目再浪一会儿。他用 Windows API 写了一个屏幕彩色闪烁的程序，后来这个程序的功能越来越多，我也「帮」他找出了不少 bug，比如说输入字母会无法返回选择菜单（他不准备修），输入 -1 会越界访问其它内存的内容然后崩溃掉之类。当然我们还开发了一种名为「256 色」的娱乐项目。&lt;/p&gt;

&lt;p&gt;其实只用机房里的电脑娱乐是有很多方法的，比如说一直输出 &lt;code class=&quot;highlighter-rouge&quot;&gt;\a&lt;/code&gt;（这会让电脑一直发出滴滴声，而且窗口会关不掉），用 Windows API 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Beep()&lt;/code&gt; 发出不同旋律的声音。只是后来我们玩得太过头，结果老师把声卡驱动直接删掉（电脑不能直接连外网，每次启动自动恢复硬盘），顺带禁用了很多东西（似乎是用组策略干的）：任务管理器、控制面板、MMC……&lt;/p&gt;

&lt;p&gt;但是你要知道，只要想玩，总是可以找到玩的方法的。钱逗一开始把「开始菜单」的样式切换了一下，然后就发现了 Outlook Express，顺带给自己起了个英文名：John Smith（这是 Outlook Express 的示例名称）。不久后他在某程序上点了右键属性，发现了「兼容模式」，又发现点击「用 256 色运行」后会有复古效果出现，于是我们就开始玩了。&lt;/p&gt;

&lt;p&gt;首先我发现在 explorer.exe 上加选项，然后到「网上邻居」里面让资源管理器卡死重启就能有很长时间的效果了；之后我又想到在 Dev-C++（这是我们用的 IDE）的 ConsolePauser.exe 或者是 g++.exe 上加选项可以有「暂时」而烦人的效果；最后，他发现控制台程序加选项后 Alt + Enter 全屏之后退出会有永久的 256 色效果……&lt;/p&gt;

&lt;p&gt;我们真是一群无聊的人。我还用了一种捉弄钱逗的极好方法：在 iostream.h 里面加 &lt;code class=&quot;highlighter-rouge&quot;&gt;#include &amp;lt;con&amp;gt;&lt;/code&gt;，然后……hhh（仅限 Windows）。&lt;/p&gt;

&lt;p&gt;隔壁的机房在空闲的时候也是可以去的。那儿有 4 台 Mac，虽然一台坏了，只会在开机的时候嘟嘟叫，还有很多 PC 台式机。有一台 Mac 上面装了游戏「地狱边界」（LIMBO），于是我们都围在一起玩出主意。&lt;/p&gt;

&lt;p&gt;有天在科技夏令营的那天学校里还看到爽哥，那天还拿到了一张奖状，这是后话了。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;开学换了新班级，从 4 到 2，不过高二（2）班写得、叫得都比较顺。第一天我想竞选电教，失败了。不过老邓在文强挺顺的，当了班长。还有「她」在新班级还是和爽哥一个班，不是班长了，变成了团支书。&lt;/p&gt;

&lt;p&gt;当然班干部什么的，我现在不怎么关心了。初中安心当了三年电教之后，现在在管人和管机器中选择，我一定会选择管机器的——机器好弄，而人心难测。&lt;/p&gt;

&lt;p&gt;新班级的同学大多不认识，老师几乎全换，不适应肯定是有的。同学们都很友好，不过说一句坏话，谁知道他们（和我）以后会变成怎样呢？&lt;/p&gt;

&lt;p&gt;这是个大坑，以后找时间再填吧。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;说到「她」。不知道她在新班级怎样？开心吗？有什么变化吗？她，还是她吗？&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;我们「四人小组」在这个暑假里进行了第一次聚会。&lt;/p&gt;

&lt;p&gt;其实这个「四人小组」还是一开始我取的名字，因为讨论组没有名字，我就加了一个临时的，没有到用了近一年。后来经过老邓和爽哥的提议，最终变成了「四个卖女孩的小火柴」（这名字个人觉得有点二，不过他们都喜欢）。&lt;/p&gt;

&lt;p&gt;时间在 8 月 6 日，因为爽哥要乘公交早点回去，所以时间只能用来吃顿饭再粗略逛下街。地点在苏宁广场和南长街中选择，然后我用 Python 写了一个简单的程序随机选择。于是随机数&lt;del&gt;之神&lt;/del&gt;选择了南长街。&lt;/p&gt;

&lt;p&gt;然后我们就在那儿聚会啦（好吧我一开始还找不到那儿），吃了顿饭，味道不错，虽然我聊天的能力不强。吃完之后就逛街，大家都很开心。&lt;/p&gt;

&lt;p&gt;我就粗略地写写吧，让老邓来写会比我好得多的。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;暑假的坑差不多填完了。我刚才在想，我洋洋洒洒写了三千多字是在写给谁看呢？网站的访问统计代码去年就去掉了，我不知道有没有别人会看我写的东西——估计是没有的，毕竟我没有做任何的 SEO 优化之类乱七八糟的玩意儿。&lt;/p&gt;

&lt;p&gt;我是在写给我自己看。这些文字是我处在某个时间段时候的记录。就像很多人都记日记一样，我也就在这里写点东西。若干年后回头看一看，或许会是「我那时候竟然这么幼稚」或者是「我那时怎么想到的」。至于把它们写在网站里，也许是出自一种「自豪感」，至少自己写的东西能够在互联网上呈现出来，而且样式（CSS）是可以控制的，可以以自己想要的方式呈现出来。它们也许比一粒沙子还小，但如果会有人看呢？（所以有一个没什么用的评论系统）&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;最后：高二，加油！&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>taoky</name>
          
          
        </author>
      

      
        <category term="生活" />
      

      
        <category term="杂记" />
      

      
        <summary type="html">我发现似乎我在暑假里并没有在这里写过东西，或者说这里看上去已经「荒废」掉了。当然其中的主要原因是时间分配问题：当我想写点什么的时候发现没有时间，当我有时间的时候我什么都不想写了。而且我本来意图是想把这里变成一个共同记录下生活与技术的地方。结果现在我更想写生活，但又不想透露出所有的事情，总之内心的想法很复杂，但总也实现不了啦。</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Markdown 简要使用手册</title>
      
      
      <link href="https://taoky.github.io/2015-06-20/introduction-to-markdown.html" rel="alternate" type="text/html" title="Markdown 简要使用手册" />
      
      <published>2015-06-20T00:00:00+00:00</published>
      <updated>2015-06-20T00:00:00+00:00</updated>
      <id>https://taoky.github.io/2015-06-20/introduction-to-markdown</id>
      <content type="html" xml:base="https://taoky.github.io/2015-06-20/introduction-to-markdown.html">&lt;p&gt;Markdown 是一种简单易用的标记语言。它被用来编写简单的多格式的文档，语法简单。纵使你不了解它的语法，你也非常容易看懂 Markdown 文档。它可以被转换为 HTML。它有助于编写结构化的文档，实现内容与结构的&lt;del&gt;有机统一&lt;/del&gt;分离。（简单的说，就是 Markdown 写的是结构，至于长什么样子是 CSS 的事）
&lt;!--more--&gt;
初次使用时注意一个特点：段与段之间需要空一行。不然下面的文档：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;First line
Second line
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;会变成以下 HTML 代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;First line
Second line&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 标签中有空行，然而这并没有什么用，显示结果是：&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;First line
Second line&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;另外，当有一些「特殊的字符」时，需要在字符前加入「\」（反斜杠），不然 Markdown 会解析成别的东西。&lt;/p&gt;

&lt;h3 id=&quot;标题&quot;&gt;标题&lt;/h3&gt;

&lt;p&gt;使用：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Heading 1
## Heading 2
### Heading 3
#### Heading 4
##### Heading 5
###### Heading 6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Markdown 将根据 # 的个数，分别使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; 到 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; 的标签显示标题。&lt;/p&gt;

&lt;h3 id=&quot;引用&quot;&gt;引用&lt;/h3&gt;

&lt;p&gt;使用：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; 640 K ought to be enough for anybody.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;显示为：&lt;/p&gt;

&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;640 K ought to be enough for anybody.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;列表&quot;&gt;列表&lt;/h3&gt;

&lt;h4 id=&quot;无序列表&quot;&gt;无序列表&lt;/h4&gt;

&lt;p&gt;使用：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* Review lessons
* Update software
* Write an article
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;（&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 也可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;）&lt;/p&gt;

&lt;p&gt;显示为：&lt;/p&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Review lessons&lt;/li&gt;
  &lt;li&gt;Update software&lt;/li&gt;
  &lt;li&gt;Write an article&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;有序列表&quot;&gt;有序列表&lt;/h4&gt;

&lt;p&gt;使用：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. Install OS X 10.10
2. Open 'Terminal.app'
3. Input 'ls'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;显示为：&lt;/p&gt;

&lt;hr /&gt;
&lt;ol&gt;
  &lt;li&gt;Install OS X 10.10&lt;/li&gt;
  &lt;li&gt;Open ‘Terminal.app’&lt;/li&gt;
  &lt;li&gt;Input ‘ls’&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;不管序号前面的数字是什么，这个列表都会按正整数顺序输出。&lt;/p&gt;

&lt;p&gt;注意：列表包含多个段落时需要缩进（四个空格或一个制表符），像这样：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. Today is a nice day.

	I hope you will think so.
	
2. Sorry.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;代码&quot;&gt;代码&lt;/h3&gt;

&lt;h4 id=&quot;区块代码&quot;&gt;区块代码&lt;/h4&gt;

&lt;p&gt;使用：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;```
#include &amp;lt;stdio.h&amp;gt;

int main(void)
{
	printf(&quot;Hello, world!\n&quot;);
	return 0;
}
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;或者每行前加入缩进。&lt;/p&gt;

&lt;p&gt;显示为：&lt;/p&gt;

&lt;hr /&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main(void)
{
	printf(&quot;Hello, world!\n&quot;);
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;行内代码&quot;&gt;行内代码&lt;/h4&gt;

&lt;p&gt;使用：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The first line of the code of a HTML5 web page is ``&amp;lt;!DOCTYPE html&amp;gt;``.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;显示为：&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;The first line of the code of a HTML5 web page is &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;如果代码内无 &lt;code class=&quot;highlighter-rouge&quot;&gt;`&lt;/code&gt;，也可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;`Code Inside...`&lt;/code&gt; 单个包裹。&lt;/p&gt;

&lt;h3 id=&quot;分隔符&quot;&gt;分隔符&lt;/h3&gt;

&lt;p&gt;使用：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
***
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;都可以。&lt;/p&gt;

&lt;h3 id=&quot;文本强调&quot;&gt;文本强调&lt;/h3&gt;

&lt;p&gt;使用：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;**Attention!**: System will close all connections in 30 minutes!

*Isn't it amazing?*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;显示为：&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Attention!&lt;/strong&gt;: System will close all connections in 30 minutes!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Isn’t it amazing?&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;其它文本行内样式部分&quot;&gt;其它文本行内样式（部分）&lt;/h3&gt;

&lt;p&gt;注意：部分程序可能不支持。不同程序可能支持标准不同。&lt;/p&gt;

&lt;p&gt;使用：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~~What I said is wrong.~~

&amp;lt;http://www.github.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;显示为：&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;del&gt;What I said is wrong.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.github.com&quot;&gt;http://www.github.com&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;图片&quot;&gt;图片&lt;/h3&gt;

&lt;p&gt;使用：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;![Test (Alt Text)](/pictures/md/test.png &quot;Photo in markdown&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;显示为：&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/pictures/md/test.png&quot; alt=&quot;Test (Alt Text)&quot; title=&quot;Photo in markdown&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;其中引号内可选。&lt;/p&gt;

&lt;p&gt;或者是「参考式」：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;![Test (Alt Text)][2536]
[2536]: /pictures/md/test.png &quot;Photo in markdown&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;链接&quot;&gt;链接&lt;/h3&gt;

&lt;p&gt;使用：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Fork this repo: [website](&quot;http://www.github.com&quot; &quot;GitHub&quot;)

Wikipedia: [English][wiki]

[wiki]: http://en.wikipedia.org &quot;Wikipedia&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;显示为：&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Fork this repo: &lt;a href=&quot;&amp;quot;http://www.github.com&amp;quot;&quot; title=&quot;GitHub&quot;&gt;website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wikipedia: &lt;a href=&quot;http://en.wikipedia.org&quot; title=&quot;Wikipedia&quot;&gt;English&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;同样，引号可选。&lt;/p&gt;

&lt;h3 id=&quot;表格&quot;&gt;表格&lt;/h3&gt;

&lt;p&gt;注意：部分程序可能不支持&lt;/p&gt;

&lt;p&gt;使用：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Name  | Class
------------- | -------------
Alice  | 1
Bob  | 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;显示为：&lt;/p&gt;

&lt;hr /&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Class&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;p&gt;可以设置对齐：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;| Application  | Operating System  | Latest Version |
|:------------- |:---------------:| -------------:|
| Microsoft Office | Windows, OS X | 2013 |
| iTunes      | Windows, OS X | 12 |
| Google Chrome | Windows, Linux, OS X        | 43 |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;显示为：&lt;/p&gt;

&lt;hr /&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Application&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Operating System&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Latest Version&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Microsoft Office&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Windows, OS X&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2013&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;iTunes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Windows, OS X&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Google Chrome&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Windows, Linux, OS X&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;43&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;p&gt;第一列左对齐，第二列居中对齐，第三列右对齐。&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>taoky</name>
          
          
        </author>
      

      
        <category term="Markdown" />
      

      
        <category term="Markdown" />
      
        <category term="手册" />
      

      
        <summary type="html">Markdown 是一种简单易用的标记语言。它被用来编写简单的多格式的文档，语法简单。纵使你不了解它的语法，你也非常容易看懂 Markdown 文档。它可以被转换为 HTML。它有助于编写结构化的文档，实现内容与结构的有机统一分离。（简单的说，就是 Markdown 写的是结构，至于长什么样子是 CSS 的事） 初次使用时注意一个特点：段与段之间需要空一行。不然下面的文档：</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">KDE 5 体验：「一下拍扁」</title>
      
      
      <link href="https://taoky.github.io/2015-02-14/flat-kde5-trial.html" rel="alternate" type="text/html" title="KDE 5 体验：「一下拍扁」" />
      
      <published>2015-02-14T00:00:00+00:00</published>
      <updated>2015-02-14T00:00:00+00:00</updated>
      <id>https://taoky.github.io/2015-02-14/flat-kde5-trial</id>
      <content type="html" xml:base="https://taoky.github.io/2015-02-14/flat-kde5-trial.html">&lt;p&gt;今天……嗯……是情人节暨世界癫痫日。我既没有女生喜欢，又没有癫痫，所以今天还是一个平常的日子。当我看到下载堆栈里的 KDE 5 的体验光盘文件的时候，我想，要不今天不写研究性学习报告了，放松一下，来看看 KDE 最近发展的情况吧。&lt;/p&gt;

&lt;p&gt;在用 OS X 之前，我用的操作系统是 Linux，发行版是 Fedora，桌面环境是 KDE。这是一个不错的桌面环境，并且我也不太喜欢 GNOME、Unity 之类的，自然便投向了 Qt 系的桌面环境。只是换了 OS X 之后不再怎么用 Linux 了。那时的 KDE 应该是到了 4.11 吧，稳定性尚可，但有时还会崩溃，更多的是直接卡住。卡着的时候我便知道八成又是用了 swap，swap 一用太多就卡的很。
&lt;!--more--&gt;
似乎扯得太多了，直接开始看吧。当然因为是虚拟机试用，所以动画效果之类的会有些缓慢。&lt;/p&gt;

&lt;p&gt;我用的是 KDE 提供的&lt;a href=&quot;http://files.kde.org/snapshots/neon5-latest.iso.mirrorlist&quot;&gt;体验光盘文件&lt;/a&gt;，下载完一开始用的时候发现这张 LiveCD 提供的内容很不全：有中文翻译，但没有中文字体，于是中文字便直接变为「方块字」，没有 PDF 阅读器，自带的浏览器 Konqueror 只有 KHTML 内核的。KHTML 其实还是 WebKit 的源头，但现在已不怎么能跟得上这个 HTML 5 的时代了。&lt;/p&gt;

&lt;p&gt;于是尝试配置源下载点东西，但最后放弃了。主要原因是：分配的内存太小，下载一些东西就快用完了（我没分配硬盘）。所以我还是看英文好了。&lt;/p&gt;

&lt;h3 id=&quot;新的扁平风格看上去不错&quot;&gt;新的扁平风格：看上去不错&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://taoky.github.io/pictures/kde5/login-screen.png&quot; alt=&quot;登陆界面&quot; /&gt;&lt;/p&gt;

&lt;p&gt;登陆的界面很现代化，进入之后可以明显注意到 KDE 5 正在尝试一步步抛弃 KDE 4 时代的毛玻璃、立体化（或者说叫拟物化）效果。进入 KDE 的 System Settings，可以明显发现默认的主题已不再是 Oxygen，而是一款新主题：Breeze。从桌面风格、鼠标指针、锁屏界面、KDE 程序风格都发生了较大的变化，除了窗口边框仍然是 Oxygen（但也可以换成 Breeze）以外，其它组件的外貌都变了。从中可以体现出 KDE 开发成员已经在抛弃拟物，尝试扁平。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://taoky.github.io/pictures/kde5/all-breeze.png&quot; alt=&quot;Breeze 风格&quot; /&gt;&lt;/p&gt;

&lt;p&gt;准确地说，KDE 有一点点 Windows 8 设计风格的感觉，但不是很明显。OS X 的影子还是可以体现出来的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://taoky.github.io/pictures/kde5/KDE5-style.png&quot; alt=&quot;KDE 窗口效果&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面放几张图，大家看看吧。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://taoky.github.io/pictures/kde5/appearance-1.png&quot; alt=&quot;Appearance 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://taoky.github.io/pictures/kde5/appearance-2.png&quot; alt=&quot;Appearance 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://taoky.github.io/pictures/kde5/appearance-3.png&quot; alt=&quot;Appearance 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://taoky.github.io/pictures/kde5/appearance-4.png&quot; alt=&quot;Appearance 4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://taoky.github.io/pictures/kde5/appearance-5.png&quot; alt=&quot;Appearance 5&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;速度与稳定性&quot;&gt;速度与稳定性&lt;/h3&gt;

&lt;p&gt;嗯，估计是由于使用虚拟机的缘故，KDE 5 的表现并不好。速度不快，但一般也不怎么卡，如果开的程序太多分配的内存不太够的话 Plasma 或者其它的 KDE 进程就会崩溃，也有可能死机。&lt;/p&gt;

&lt;p&gt;至于放在真机上 KDE 5 的表现会如何就不清楚了。小内存的机器运行会~~略~~有较大压力。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://taoky.github.io/pictures/kde5/crash-kde.png&quot; alt=&quot;KDE 的崩溃&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;一些问题&quot;&gt;一些问题&lt;/h3&gt;

&lt;p&gt;不少程序（Dolphin、Konqueror……几乎除了 System Settings 以外都是）仍然还是 KDE 4 的风格，似乎使用的是 QtCurve 的风格，与新风格非常不协调。并且似乎并没有准备好给 GTK 程序的主题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://taoky.github.io/pictures/kde5/KDE5-and-4.png&quot; alt=&quot;KDE 5 与 KDE 4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PS：KDE 5 关于窗口的左边的吉祥物很可爱啊。&lt;/p&gt;

&lt;p&gt;同时也发现了一个 Bug：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://taoky.github.io/pictures/kde5/bug-1.png&quot; alt=&quot;一个小 Bug&quot; /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>taoky</name>
          
          
        </author>
      

      
        <category term="KDE" />
      

      
        <category term="KDE 5" />
      
        <category term="Linux" />
      

      
        <summary type="html">今天……嗯……是情人节暨世界癫痫日。我既没有女生喜欢，又没有癫痫，所以今天还是一个平常的日子。当我看到下载堆栈里的 KDE 5 的体验光盘文件的时候，我想，要不今天不写研究性学习报告了，放松一下，来看看 KDE 最近发展的情况吧。</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Hello, 2015!</title>
      
      
      <link href="https://taoky.github.io/2014-12-31/hello-2015.html" rel="alternate" type="text/html" title="Hello, 2015!" />
      
      <published>2014-12-31T00:00:00+00:00</published>
      <updated>2014-12-31T00:00:00+00:00</updated>
      <id>https://taoky.github.io/2014-12-31/hello-2015</id>
      <content type="html" xml:base="https://taoky.github.io/2014-12-31/hello-2015.html">&lt;p&gt;嗯，是的。好像时间过得很快，2014 年春节时候整理照片的事情还记得清清楚楚，这一年的尾声就到了。怎么说好呢？我不知道。
&lt;!--more--&gt;&lt;/p&gt;
&lt;h2 id=&quot;look-back-on-2014&quot;&gt;Look back on 2014&lt;/h2&gt;

&lt;h3 id=&quot;第一台-mac和第一次体验-os-x&quot;&gt;第一台 Mac，和第一次体验 OS X&lt;/h3&gt;

&lt;p&gt;把这件事情写在最前面的原因很简单——OS X 给我留下了非常深刻的印象。事实上，你所看到的这段文字，正是在一台 Mac 上写下的。&lt;/p&gt;

&lt;p&gt;说实话，OS X 上的生活比在 Linux 下的条件好的多——有 QQ，不再寄托于 WebQQ；有 M$Office，不用再困扰于 LibreOffice 的兼容性问题，WPS（Beta / Alpha）的稳定性与功能不足。相比于 Windows，它的界面足够漂亮好用，而且还有一个不错的 Terminal，跟 Windows 近乎残废的 cmd.exe 比实在好太多—— cmd.exe 甚至连全屏显示都不行。&lt;/p&gt;

&lt;p&gt;从小细节上来说，OS X 也足够令人忘怀。Mac 有我用过的最好用的触摸板（所以我现在电脑旁边都没有鼠标），有全系统的字典，有特别棒的 Spotlight……&lt;/p&gt;

&lt;p&gt;若要问其问题，当然也有。比如说其相当诡异的「最大化」绿色按钮——在 OS X 10.9 及以下版本中，你永远都不会知道这个按钮的行为会是什么，每次按下去都充满惊喜！当然在 10.10 中改成全屏了，但用着很不习惯。另外，如果你想看几个文件合起来的大小，然后选中它们之后按下了 Command + I 的话——如果你弄了十几个文件，那就会有&lt;strong&gt;十几个&lt;/strong&gt;窗口弹出来，这个「用户体验」太爽了……&lt;/p&gt;

&lt;p&gt;当然，现在我用着还是蛮舒服的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It just works.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Isn’t it?&lt;/p&gt;

&lt;h3 id=&quot;初中的黄金时代&quot;&gt;初中的「黄金时代」&lt;/h3&gt;

&lt;p&gt;现在，假使我有一台 Time Machine（当然不是 Mac 那个文件备份用的），那么我会选择回到何时？&lt;/p&gt;

&lt;p&gt;去掉一些对历史的好奇成分（比如说回到清朝看其如何灭亡之类），我会选择回到初三上半学期（事实上这很大一部分已经不属于 2014 了，但是我还是忍不住想说说）。&lt;/p&gt;

&lt;p&gt;首先初二上半学期肯定排除了，那是我初中度过的最可怕的时光，我差点和徐娟大打起来，小冲突几乎天天都有。下半学期和老茶坐一起的时候也不错，只是感觉比不上初三上半学期。&lt;/p&gt;

&lt;p&gt;记得初三上半学期一开始，忘了是谁想出来的主意，分了四个社（名字可能不叫「社」，记不清了）。那时我想，我语文不咋样，一直被阅读和作文坑（直到现在还是那样），于是我便最后选择了「文学社」。四个社，刚好分配成四个大组。于是我便分到了那一大组。同桌是老邓（当然不能在她面前这样叫她），后面二位是老温和爽爽，右边是老茶，前面是班长（初一时候是，初二初三时候就不是了，以下都是指她）。我那时应该想不到，我和老邓、老温、爽爽会形成一个固定的四人整体，在多次调换座位的时候固定住。当然，那时我只想到前面是班长，可以每天和她交流，这一点就够我高兴了。&lt;/p&gt;

&lt;p&gt;在这样一个奇特的环境之下，我们之间的相处还是挺融洽的。当然有些事情的发生还是比较奇怪的，比如我不知不觉间变成「0.5 个男的」，而老邓变成了 2 个，于是我们这个四人团体便变成了「4.5 个男的」，后面二位各占一个；还有一开始的时候，我那一大组的周围一圈人都在问我我喜欢谁……我最后跟老邓招了，她虽然保证替我保守秘密，但两个月后，爽爽就知道了，进入下半学期之后，又多两个人知道这件事；那时班长的同桌还固执地认为我喜欢另外一个女生——当然这是后话了。&lt;/p&gt;

&lt;p&gt;应该是期中考试之后的月考那次吧，座位换了。班长被调远了，但我们四个人还是没变（好像没什么事情发生，但我记得特别清楚）。&lt;/p&gt;

&lt;p&gt;为什么说这段时间是「黄金时代」？因为周围的环境好，在这样的环境里心情好，成绩也不错。&lt;/p&gt;

&lt;p&gt;就这样简单。&lt;/p&gt;

&lt;h3 id=&quot;高中四月记&quot;&gt;高中四月记&lt;/h3&gt;

&lt;p&gt;高中生活如果从九月开始计数的话，到现在已经四个月了。我来到了四班，一个人都不认识。我们四个人再也没法每天聚一块儿交流了，但我们到现在仍是一个整体。&lt;/p&gt;

&lt;p&gt;当然高中有很多地方都不错。例如社团、选修课（像我当然滚去信息社编程去了）、研究性学习（我和成员这次弄 STL）、还有竞赛（信息竞赛），当然学习压力也加大了，我还记得当初学匀加速、牛二、时的各种纠结，那真是痛苦的经历。&lt;/p&gt;

&lt;p&gt;信息竞赛用的是 C++，我以前只写过 C，不过竞赛用的 C++ 范围连「C with classes」都达不到，只是用 C 的语法，加上一些 STL 的内容——比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;sort()&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;swap()&lt;/code&gt; 之类罢了。社团没有共同的活动，选修课教 VB6（我其实更想用 Qt 写图形程序，但没那个能力），但到学期末连数组、&lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; 都没学到（我对 VB 没多大兴趣，所以只是这样弄弄）。其中乐趣也是有的，比如说我们报信息的不用上音乐课啊，ASCII 里的 &lt;code class=&quot;highlighter-rouge&quot;&gt;\a&lt;/code&gt; 和 Windows API 里的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Beep()&lt;/code&gt;，被我们用来编歌之类。&lt;/p&gt;

&lt;p&gt;住宿就没那么幸福了。当舍长需要承受老师和舍员带来的压力，并不是那么好当的。先写这么多吧。&lt;/p&gt;

&lt;h2 id=&quot;going-to-2015--2015-目标&quot;&gt;Going to 2015 —— 2015 目标&lt;/h2&gt;

&lt;p&gt;或许像这样的「目标」从某种意义上讲是一个特别虚的东西，你定下了它，在以后的时间里却被忘却。&lt;/p&gt;

&lt;p&gt;但我还是想写写。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;找时间把我旁边那堆书慢慢读完（或许这个任务一年以内完不成）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;继续努力学算法&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;继续能够稳定地在四班呆着&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;还有吗？以后再说吧。新年快到了。&lt;/p&gt;

&lt;p&gt;新年快乐。Hello, 2015!&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>taoky</name>
          
          
        </author>
      

      
        <category term="生活" />
      

      
        <category term="2015" />
      
        <category term="回忆" />
      

      
        <summary type="html">嗯，是的。好像时间过得很快，2014 年春节时候整理照片的事情还记得清清楚楚，这一年的尾声就到了。怎么说好呢？我不知道。 Look back on 2014</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">渣翻译：Identifying Back Doors, Attack Points, and Surveillance Mechanisms in iOS Devices</title>
      
      
      <link href="https://taoky.github.io/2014-07-30/translation-iOS-backdoor.html" rel="alternate" type="text/html" title="渣翻译：Identifying Back Doors, Attack Points, and Surveillance Mechanisms in iOS Devices" />
      
      <published>2014-07-30T00:00:00+00:00</published>
      <updated>2014-07-30T00:00:00+00:00</updated>
      <id>https://taoky.github.io/2014-07-30/translation-iOS-backdoor</id>
      <content type="html" xml:base="https://taoky.github.io/2014-07-30/translation-iOS-backdoor.html">&lt;p&gt;似乎最近关于 iOS 被发现存在后门的事情传得火热，本着不怎么相信媒体评论，自己看传出后门的文档的想法，找到了源文档，顺便用了几个小时翻译了一遍。说是翻译，其实信达雅，一样都没有。有几个词出现很多次，但就算查了词典，也根本不知道是什么意思。我只能保证你看完翻译之后了解事情的大概情况。
&lt;!--more--&gt;
源文档：&lt;a href=&quot;http://www.zdziarski.com/blog/wp-content/uploads/2014/07/iOS_Backdoors_Attack_Points_Surveillance_Mechanisms_Moved.pdf&quot;&gt;Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;渣翻译文档：&lt;a href=&quot;/attachments/iOS_backdoor.pdf&quot;&gt;Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以上。&lt;/p&gt;

&lt;p&gt;利益相关：OS X/Linux/Windows/iOS 用户。&lt;/p&gt;

&lt;p&gt;PS：Apple 回复原作者发现「后门」事件：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我们在设计iOS时，加入了设备诊断功能。这一功能的目的是向(用户所在的)公司的IT维护部门，程序设计者及苹果公司提供信息，以诊断设备。我们确保了这一“设备诊断”功能不会危害用户的隐私和信息安全。任何苹果设备都只有在解锁并连接至可信任的电脑后，苹果才会获取这些有限的诊断信息。如果用户没有同意分享这些信息，我们不会传输任何数据。&lt;/p&gt;
&lt;/blockquote&gt;</content>

      
      
      
      
      

      
        <author>
            <name>taoky</name>
          
          
        </author>
      

      
        <category term="翻译" />
      

      
        <category term="iOS" />
      
        <category term="英文" />
      
        <category term="后门" />
      
        <category term="漏洞" />
      

      
        <summary type="html">似乎最近关于 iOS 被发现存在后门的事情传得火热，本着不怎么相信媒体评论，自己看传出后门的文档的想法，找到了源文档，顺便用了几个小时翻译了一遍。说是翻译，其实信达雅，一样都没有。有几个词出现很多次，但就算查了词典，也根本不知道是什么意思。我只能保证你看完翻译之后了解事情的大概情况。 源文档：Here</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">班级网页第二版发布！</title>
      
      
      <link href="https://taoky.github.io/2014-07-18/class-v2-published.html" rel="alternate" type="text/html" title="班级网页第二版发布！" />
      
      <published>2014-07-18T00:00:00+00:00</published>
      <updated>2014-07-18T00:00:00+00:00</updated>
      <id>https://taoky.github.io/2014-07-18/class-v2-published</id>
      <content type="html" xml:base="https://taoky.github.io/2014-07-18/class-v2-published.html">&lt;p&gt;班级网页第二版发布了！使用最新版本的 Bootstrap，全新扁平化设计，更好兼容手机、平板等移动设备，并抛弃对旧版本浏览器（IE 6/7）的支持。&lt;/p&gt;

&lt;p&gt;其实新版的班级网页是从八个月前（2013 年 11 月 17 日）开始做的（你没看错）。做了一天，约一个月后（12 月 8 日）又修修补补了一些东西，又两个月后又做了一小部分，然后一直烂尾到……中考结束才继续开始。&lt;/p&gt;

&lt;p&gt;现在我表示我终于熟悉用 jekyll 和 liquid 的使用了……表示 liquid 竟然不能进行文件的 I/O 操作，导致制作换页器的时候遇到了很大的阻力，用了两天才解决问题，貌似我踩到了一个坑吧……
&lt;!--more--&gt;
因为 GitHub 上「建议」不要放视频（也放不了，文件太大了），所以视频托管在优酷上，广告什么的我不负责。&lt;/p&gt;

&lt;p&gt;另外表示从老师博客上搜集文章也是一件很繁的事情。我居然打开了 Firefox（OS X 上 Firefox 的触摸板体验太差，所以我换 Chrome 了），用 DownThemAll 一页页翻出来下载，然后用 Sublime Text 的文件批量替换网页的各种格式（网易博客的 HTML 文件很乱，各种内嵌 CSS），最后转换成 Markdown，就花了我两天。&lt;/p&gt;

&lt;p&gt;另外压缩图片也很繁琐。表示压缩图片需要小心翼翼——可能一个参数没弄好，图片就糊了（在 Retina 屏幕上特别明显）。一开始图片有 &amp;gt;300 M，最后尝试各种压缩方法才压到 &amp;lt;1 M（当然图像的损失很多）。&lt;/p&gt;

&lt;p&gt;PS：OS X 上无损压缩可以用 ImageOptim，有损可以尝试安装 imagemagick，然后 &lt;code class=&quot;highlighter-rouge&quot;&gt;convert -resize 80%x80%&lt;/code&gt; [原图像] [目标图像] 来缩放，运行多次直到压缩到满意效果。&lt;/p&gt;

&lt;p&gt;最后发布的时候也踩到一个 jekyll 的大坑。我路径用的是 “/path/file” 这类的，结果放到子目录里面各种文件加载不出。结果新建一个 repo，定义变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;site.baseurl&lt;/code&gt;，然后各种修改才解决……然后发现 https 的时候因为浏览器的安全规定文件加载不出，最后干脆用 &lt;code class=&quot;highlighter-rouge&quot;&gt;baseurl = https://...&lt;/code&gt; 这样了。&lt;/p&gt;

&lt;p&gt;不管怎么说，沉沉浮浮八个月，它终于上来了，不是吗 :-) ？&lt;/p&gt;

&lt;p&gt;附：
班级网页第二版地址：https://taoky.github.io/class-9/index.html&lt;/p&gt;

&lt;p&gt;源代码（jekyll）：https://github.com/taoky/ClassV2&lt;/p&gt;

&lt;p&gt;发布版本：https://github.com/taoky/class-9/tree/gh-pages&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>taoky</name>
          
          
        </author>
      

      
        <category term="班级" />
      

      
        <category term="班级" />
      
        <category term="网页" />
      
        <category term="Bootstrap" />
      

      
        <summary type="html">班级网页第二版发布了！使用最新版本的 Bootstrap，全新扁平化设计，更好兼容手机、平板等移动设备，并抛弃对旧版本浏览器（IE 6/7）的支持。</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">班级网页 1.1 版</title>
      
      
      <link href="https://taoky.github.io/2014-06-19/class-website-1.1.html" rel="alternate" type="text/html" title="班级网页 1.1 版" />
      
      <published>2014-06-19T00:00:00+00:00</published>
      <updated>2014-06-19T00:00:00+00:00</updated>
      <id>https://taoky.github.io/2014-06-19/class-website-1.1</id>
      <content type="html" xml:base="https://taoky.github.io/2014-06-19/class-website-1.1.html">&lt;p&gt;进来发现班级网页 1.0 版访问速度极慢，即使在本地访问也是如此。经检查，发现是浏览器为得到一些网页字体文件与 jQuery 库，访问了一个被超时的服务器。&lt;/p&gt;

&lt;p&gt;问题已经修复。（其实我本来想放弃维护的。）
&lt;!--more--&gt;&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>taoky</name>
          
          
        </author>
      

      
        <category term="班级" />
      

      
        <category term="学校" />
      
        <category term="网页" />
      

      
        <summary type="html">进来发现班级网页 1.0 版访问速度极慢，即使在本地访问也是如此。经检查，发现是浏览器为得到一些网页字体文件与 jQuery 库，访问了一个被超时的服务器。</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">我认为的文字规范</title>
      
      
      <link href="https://taoky.github.io/2014-06-18/my-thought-of-language-use-in-blog.html" rel="alternate" type="text/html" title="我认为的文字规范" />
      
      <published>2014-06-18T00:00:00+00:00</published>
      <updated>2014-06-18T00:00:00+00:00</updated>
      <id>https://taoky.github.io/2014-06-18/my-thought-of-language-use-in-blog</id>
      <content type="html" xml:base="https://taoky.github.io/2014-06-18/my-thought-of-language-use-in-blog.html">&lt;p&gt;中考考完了，先让我抒发一下感受。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;中考考完了&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;啊&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;！&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;!--more--&gt;
&lt;hr /&gt;

&lt;p&gt;进来看自己以前写的东西，很惊讶，格式很难看。不知是不是受到了什么的影响，总觉得自己以前写的东西格式有问题、错乱啊之类的，所以我觉得我应该把自己对排版的看法记下来。或许，以后看看，可能会有自己一套新主意，可能会觉得自己那个时候怎么这么幼稚……&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;中文与英文、数字间统一空一格。&lt;/p&gt;

    &lt;p&gt;Example: 这台电脑安装了 Mac OS X 与 Windows 7 的双系统。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;所有引文使用 Markdown 的区块引用，并且引文内容不变。&lt;/p&gt;

    &lt;p&gt;Example:&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;“GNU/Linux”是GNU计划的支持者与开发者，特别是其创立者理查德·斯托曼对于以Linux内核为内核的操作系统的称呼。由于Linux使用了许多GNU程序，理查德·斯托曼认为应该将该操作系统称为“GNU/Linux”比较恰当。绝大多数Linux操作系统使用了大量的GNU软件，包括了一个shell程序、工具、库、编译器及工具，还有许多其他程序，例如Emacs、Vi。正因为如此，GNU计划的开创者理查德·马修·斯托曼提议将Linux操作系统改名为GNU/Linux，但多数人仍然习惯性地使用“Linux”。	——维基百科&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;以中文为主体的情况下，连接英文与中文的标点符号使用中文标点，连接英文与英文的标点符号使用英文标点。&lt;/p&gt;

    &lt;p&gt;Example: 「Hello, World!」他喊道。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;中文引号统一使用直角引号（「」），英文中使用西式引号（”“）。&lt;/p&gt;

    &lt;p&gt;Example: 书中写道：「Click “Help”, and you will find more information.」&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;命令、代码中关键字使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;code&amp;gt;&lt;/code&gt;、代码使用代码高亮，格式不变。&lt;/p&gt;

    &lt;p&gt;Example: 打开 Terminal，然后输入「&lt;code class=&quot;highlighter-rouge&quot;&gt;df -h /&lt;/code&gt;」，就可以看到你的硬盘中还剩下多少可用空间。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在英文环境中，使用半角括号包裹文字；在中文环境中，使用全角括号包裹文字。括号前后不加空格。&lt;/p&gt;

    &lt;p&gt;Example: 使用通用串行总线（USB）的设备在我们的生活中十分常见。&lt;/p&gt;

    &lt;p&gt;Example: I don’t feel well(really?).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;生僻字添加汉语拼音标注。&lt;/p&gt;

    &lt;p&gt;Example: 他&lt;ruby&gt;彳&lt;rt&gt;chì&lt;/rt&gt;亍&lt;rt&gt;chù&lt;/rt&gt;&lt;/ruby&gt;在林中小径上。&lt;/p&gt;

    &lt;p&gt;注意：Firefox 不支持 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ruby&amp;gt;&lt;/code&gt; 标签，所以在 Firefox 上汉语拼音标注不会正常显示，而是显示成：&lt;/p&gt;

    &lt;p&gt;他彳chì亍chù在林中小径上。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;中文加粗表示强调，英文斜体表示强调。&lt;/p&gt;

    &lt;p&gt;Example: 首先进入&lt;strong&gt;安全模式&lt;/strong&gt;，然后再右击 &lt;em&gt;This Computer&lt;/em&gt;……&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;不知道还有没有别的内容了，反正我就想到了这么多。&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>taoky</name>
          
          
        </author>
      

      
        <category term="字体与排版" />
      

      
        <category term="meta" />
      
        <category term="字体" />
      
        <category term="排版" />
      
        <category term="文字" />
      

      
        <summary type="html">中考考完了，先让我抒发一下感受。</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">天一高中参观游记</title>
      
      
      <link href="https://taoky.github.io/2014-04-06/visiting-Tianyi-High-School.html" rel="alternate" type="text/html" title="天一高中参观游记" />
      
      <published>2014-04-06T00:00:00+00:00</published>
      <updated>2014-04-06T00:00:00+00:00</updated>
      <id>https://taoky.github.io/2014-04-06/visiting-Tianyi-High-School</id>
      <content type="html" xml:base="https://taoky.github.io/2014-04-06/visiting-Tianyi-High-School.html">&lt;p&gt;周三去参观的，说是初二成绩加起来 130 名以上的可以「偷得浮生半日闲」（笑）去参观。&lt;/p&gt;

&lt;p&gt;中午 12：20，英语作业还没做完呢，就被拉出去了 -_-#。排队的时候看到貌似是 8 班的语文课代表（男）在那儿对着镜子梳头……和我们班的语文课代表老温样子简直一模一样……&lt;/p&gt;

&lt;p&gt;难道语文课代表都有相似的爱好吗？！
&lt;!--more--&gt;
上了车之后就是各种聊天各种扯。&lt;/p&gt;

&lt;p&gt;到天一高中后，先去参观「信息楼」。&lt;/p&gt;

&lt;p&gt;带队老师：「信息楼里有 Computer rooms, libraries, 还有 International (?，没听清楚)。」&lt;/p&gt;

&lt;p&gt;从旁边的一个小门绕进了国际部（AP 班）的领地。一开始看到的是高三，从教室外面的大玻璃看的时候我被惊呆了：每个人手里怎么都有一台电脑……不过高二高一就看不到了。还有电子阅览室什么的。似乎条件挺不错的。但是我就想想吧，我不可能来 AP 班的。&lt;/p&gt;

&lt;p&gt;接下来到科学楼（还是叫科技楼？记不清了），仪器都不错，而且竟然连数控机床都有。那儿的天文社团到目前为止竟然发现了 18 颗（？）小行星。&lt;/p&gt;

&lt;p&gt;在去科学楼的路上，徐娟在那边扯：「这儿有下午茶吗？能不能续杯？」&lt;/p&gt;

&lt;p&gt;我：「下午茶，那不是肯德基吗？」&lt;/p&gt;

&lt;p&gt;「是必胜客。」&lt;/p&gt;

&lt;p&gt;我：「徐娟，天一高中不适合你，你还是去必胜客吧。」（暗笑）&lt;/p&gt;

&lt;p&gt;然后徐娟的脸色顿时阴沉了下来……&lt;/p&gt;

&lt;p&gt;去过科学楼后记得是去了游泳馆，一股漂白粉的味道。之后去体育馆，本人对此无爱，所以就不多做介绍了，反正很大的样子。&lt;/p&gt;

&lt;p&gt;接下来去信息楼的图书馆。确实很大，虽然我只找到一本关于电脑的书。不过时不时可以听到有文艺青年在喊：「让我死在这里吧！」&lt;/p&gt;

&lt;p&gt;最后去会议室听高中校长讲话。有人用一句话总结校长讲话：「天一高中是个好学校，你们快点过来吧！」（笑）&lt;/p&gt;

&lt;p&gt;最后回学校，到时已是 4：50，差点就能赶上吃晚饭了。&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>taoky</name>
          
          
        </author>
      

      
        <category term="生活" />
      

      
        <category term="学校" />
      
        <category term="参观" />
      

      
        <summary type="html">周三去参观的，说是初二成绩加起来 130 名以上的可以「偷得浮生半日闲」（笑）去参观。</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">谈 COS</title>
      
      
      <link href="https://taoky.github.io/2014-01-20/china-operating-system.html" rel="alternate" type="text/html" title="谈 COS" />
      
      <published>2014-01-20T00:00:00+00:00</published>
      <updated>2014-01-20T00:00:00+00:00</updated>
      <id>https://taoky.github.io/2014-01-20/china-operating-system</id>
      <content type="html" xml:base="https://taoky.github.io/2014-01-20/china-operating-system.html">&lt;p&gt;前不久有一个叫「COS」的系统发布了，英文名倒是很霸气，叫「China Operating System」，名头够大的，但虽说是发布，但我们都没看到有 ROM 或者是别的系统安装文件出现了，除了几张图片/视频之外。&lt;/p&gt;

&lt;p&gt;另外，是不是还要有「SIN」和「TAN」系统，然后组成一个三角函数系统？&lt;/p&gt;

&lt;p&gt;查了查，百度百科上全是对其的赞美之词，反正其一直是这样的，我也见怪不怪了。维基百科的就要中肯一些。&lt;/p&gt;

&lt;p&gt;网络上已经有人在怀疑，例如界面很像 HTC，但又拒绝承认与其合作什么的，我也不多说了。接下来将是找茬环节。
&lt;!--more--&gt;
1、 新闻（「&lt;a href=&quot;http://www.china-cos.com/news/detail/news_id/18.html&quot;&gt;自主知识产权操作系统COS在京发布&lt;/a&gt;」）&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;「目前基于开源的操作系统在安全性上存在很多问题，无论是乌班图（Ubuntu）还是安卓，都已经出现很多公开的安全缺陷，更有很多隐蔽的安全漏洞，随时可以控制个人设备，引发大面积的安全问题。」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;「开源系统在安全性上存在很多问题」？笑了。按这意思，闭源系统就在安全性上牛 X 了是不？那为什么 Windows 还会有「周二补丁日」，每个月送来一堆补丁？为什么 Mac OS X/iOS 在每次更新后都会有「关于 XXX 软件更新的安全性内容」？不是闭源系统安全性很牛的吗？&lt;/p&gt;

&lt;p&gt;另外，说 Ubuntu 不安全的，这里有份报告打脸来了：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.omgubuntu.co.uk/2014/01/ubuntu-12-04-secure-os-uk-government-gchq&quot;&gt;Ubuntu 12.04 Beats Windows, Mac In GCHQ Security Report&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;「 COS不同于部分嫁接于其他操作系统之上的产品，虽然也吸取了开源软件的精华，……」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;说的真好听啊，「吸取了开源软件的精华」是吧？不是刚刚还在说开源不安全来着……变脸了？&lt;/p&gt;

&lt;p&gt;对了，说到开闭源问题，这一帮子家伙有没有注意开源许可证？我在此十分担心他们的节操问题。不知道 COS 会不会严格遵守开源许可证。这一点上，iOS 就做得很好。点击设置-通用-关于本机-法律信息-法律声明，其中所有用到的开源软件的许可证都列出来了。&lt;/p&gt;

&lt;p&gt;另外，如果用 Linux 内核的话，不开源内核？作死。（BSD 应该可以这样做）&lt;/p&gt;

&lt;p&gt;2、 视频「&lt;a href=&quot;http://sm.resource.china-cos.com/player.swf?type=http&amp;amp;file=cos_intro.flv&quot;&gt;更有竞争力的操作系统&lt;/a&gt;」&lt;/p&gt;

&lt;p&gt;开头就是瞎扯，不管其发展到什么程度，COS 根本不可能有实力与中国古今发明相提并论。&lt;/p&gt;

&lt;p&gt;视频 00：58 部分，总感觉这个 COS 电脑版似曾相识，给我的第一感觉是：「Linux Deepin」。&lt;/p&gt;

&lt;p&gt;然后突然反应过来：这就是 Cinnamon 啊！窗口不太清楚，但是下面的任务栏就是 Cinnamon 的（视频看不清楚，不过非常像）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pictures/cos/cos-desktop.png&quot; alt=&quot;Cinnamon Panel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（我电脑里装的 Cinnamon 截图）&lt;/p&gt;

&lt;p&gt;至于有多少应用之类的，看看笑笑就行了。100% 是 COS 中有 Dalvik 虚拟机或是其类似实现。&lt;/p&gt;

&lt;p&gt;3、 网页「&lt;a href=&quot;http://www.china-cos.com/introduce/index.html&quot;&gt;COS 介绍&lt;/a&gt;」&lt;/p&gt;

&lt;p&gt;一图胜千言。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pictures/cos/cos-intro.png&quot; alt=&quot;Cut the Rope&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4、 某台对 COS 的宣传&lt;/p&gt;

&lt;p&gt;里面貌似有一个细节，说是可以在播放四段视频的同时，流畅编辑短信。其实……视频码率调到很低不就流畅了吗，再加上播放窗口很小，也看不出来什么，不是吗？这个根本无法说明 COS 的效率有多高。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;我觉得我不需要说什么了，从目前的资料看，COS 就是个大草包，大奇葩。我不看好任何搭载有 COS 的手机、平板、桌面计算机、机顶盒等。个人认为，开源无国界，要开源，好好地用 Android 就行了，在 &lt;a href=&quot;http://source.android.com/&quot;&gt;Android Developers&lt;/a&gt; 下载的源码不会有什么后门（毕竟世界各地无数双眼睛看着呢）。当然，像什么 Google 的服务的 App 会不会有什么问题，我不去评论（这是闭源的），发展什么「自主」啊之类的，没多大必要性。&lt;/p&gt;

&lt;p&gt;好吧，看着这东西，我想到了汉芯——买几个摩托罗拉的芯片磨一磨，就变成了自个儿个 CPU；龙芯——造假什么的倒是没有，但也不顺；麒麟——所谓完全自主版权，就是拿 FreeBSD 的成果改一改；红旗 Linux——有段时间发展的还行（我还用过！），但现在已经基本倒闭。&lt;/p&gt;

&lt;p&gt;不知道 COS 拿了多少钱，要是我来分，我会把钱全捐给 Wine，KDE 这些开源项目，这可比搞什么虚无缥缈，假冒伪劣的系统、软件靠谱不知多少倍。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;呵呵&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>

      
      
      
      
      

      
        <author>
            <name>taoky</name>
          
          
        </author>
      

      
        <category term="系统" />
      

      
        <category term="COS" />
      
        <category term="操作系统" />
      
        <category term="国产" />
      

      
        <summary type="html">前不久有一个叫「COS」的系统发布了，英文名倒是很霸气，叫「China Operating System」，名头够大的，但虽说是发布，但我们都没看到有 ROM 或者是别的系统安装文件出现了，除了几张图片/视频之外。</summary>
      

      
      
    </entry>
  
  
</feed>
